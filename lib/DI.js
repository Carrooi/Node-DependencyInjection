// Generated by CoffeeScript 1.6.3
(function() {
  var DI, Service;

  Service = require('./Service');

  DI = (function() {
    function DI() {}

    DI.prototype.services = {};

    DI.prototype.addService = function(name, service, args) {
      if (args == null) {
        args = [];
      }
      this.services[name] = new Service(this, service, args);
      return this.services[name];
    };

    DI.prototype.autowireArguments = function(method, args) {
      var arg, i, methodArgs, result, _i, _len;
      if (args == null) {
        args = [];
      }
      method = method.toString();
      method = method.replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, '');
      methodArgs = method.slice(method.indexOf('(') + 1, method.indexOf(')')).match(/([^\s,]+)/g);
      methodArgs = methodArgs === null ? [] : methodArgs;
      result = [];
      for (i = _i = 0, _len = methodArgs.length; _i < _len; i = ++_i) {
        arg = methodArgs[i];
        if (typeof args[i] === 'undefined') {
          if (arg.match(/Factory$/) === null) {
            result.push(this.getByName(arg));
          } else {
            arg = arg.substring(0, arg.length - 7);
            result.push(this.getFactory(arg));
          }
        } else {
          result.push(args[i]);
        }
      }
      return result;
    };

    DI.prototype.findDefinitionByName = function(name, need) {
      if (need == null) {
        need = true;
      }
      if (typeof this.services[name] === 'undefined') {
        if (need === true) {
          throw new Error('DI: Service with name ' + name + ' was not found');
        } else {
          return null;
        }
      }
      return this.services[name];
    };

    DI.prototype.getByName = function(name) {
      return this.findDefinitionByName(name).getInstance();
    };

    DI.prototype.create = function(name) {
      return this.findDefinitionByName(name).create();
    };

    DI.prototype.getFactory = function(name) {
      var _this = this;
      return function() {
        return _this.findDefinitionByName(name).create();
      };
    };

    return DI;

  })();

  module.exports = DI;

}).call(this);
