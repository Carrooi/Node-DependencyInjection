// Generated by CoffeeScript 1.6.3
(function() {
  var DI, Helpers, Service,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Service = require('./Service');

  Helpers = require('./Helpers');

  DI = (function() {
    DI.prototype.services = null;

    DI.prototype.paths = null;

    DI.prototype.reserved = ['di'];

    DI.prototype.creating = null;

    DI.prototype.basePath = null;

    function DI() {
      var di;
      di = new Service(this, 'di', this);
      di.instantiate = false;
      this.services = {
        di: di
      };
      this.paths = {};
      this.creating = [];
    }

    DI.prototype.getPath = function(name) {
      return (this.basePath === null ? '' : this.basePath + '/') + name;
    };

    DI.prototype.addService = function(name, service, args) {
      if (args == null) {
        args = [];
      }
      if (__indexOf.call(this.reserved, name) >= 0) {
        throw new Error("DI: name '" + name + "' is reserved by DI.");
      }
      if (typeof service === 'string') {
        service = require.resolve(this.getPath(service));
        this.paths[service] = name;
      }
      this.services[name] = new Service(this, name, service, args);
      return this.services[name];
    };

    DI.prototype.autowireArguments = function(method, args) {
      if (args == null) {
        args = [];
      }
      Helpers.log('Method autowireArguments is deprecated, use the same method in Helpers class.');
      return Helpers.autowireArguments(method, args, this);
    };

    DI.prototype.createInstance = function(service, args, instantiate) {
      if (args == null) {
        args = [];
      }
      if (instantiate == null) {
        instantiate = true;
      }
      if (instantiate === true) {
        if (Object.prototype.toString.call(service.prototype.constructor) === '[Function]') {
          service = this.inject(service, {}, args);
        } else {
          service = Helpers.createInstance(service, args, this);
        }
      }
      return service;
    };

    DI.prototype.inject = function(fn, scope, args) {
      if (scope == null) {
        scope = {};
      }
      if (args == null) {
        args = [];
      }
      if (!(fn instanceof Function)) {
        throw new Error('DI: Inject method can be called only on functions.');
      }
      args = Helpers.autowireArguments(fn, args, this);
      return fn.apply(scope, args);
    };

    DI.prototype.hasDefinition = function(name) {
      return typeof this.services[name] !== 'undefined';
    };

    DI.prototype.findDefinitionByName = function(name, need) {
      if (need == null) {
        need = true;
      }
      if (!this.hasDefinition(name)) {
        if (need === true) {
          throw new Error("DI: Service '" + name + "' was not found.");
        } else {
          return null;
        }
      }
      return this.services[name];
    };

    DI.prototype.getByName = function(name) {
      Helpers.log('DI: Method getByName is deprecated, use get method.');
      return this.get(name);
    };

    DI.prototype.getByPath = function(path) {
      var e, error;
      error = false;
      try {
        path = require.resolve(this.getPath(path));
      } catch (_error) {
        e = _error;
        error = true;
      }
      if (typeof this.paths[path] !== 'undefined' && !error) {
        return this.get(this.paths[path]);
      }
      return null;
    };

    DI.prototype.getFactoryByPath = function(path) {
      var e, error;
      error = false;
      try {
        path = require.resolve(this.getPath(path));
      } catch (_error) {
        e = _error;
        error = true;
      }
      if (typeof this.paths[path] !== 'undefined' && !error) {
        return this.getFactory(this.paths[path]);
      }
      return null;
    };

    DI.prototype.get = function(name) {
      return this.findDefinitionByName(name).getInstance();
    };

    DI.prototype.create = function(name) {
      return this.findDefinitionByName(name).create();
    };

    DI.prototype.getFactory = function(name) {
      var _this = this;
      return function() {
        return _this.findDefinitionByName(name).create();
      };
    };

    return DI;

  })();

  module.exports = DI;

}).call(this);
