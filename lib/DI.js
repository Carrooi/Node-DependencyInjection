// Generated by CoffeeScript 1.6.3
(function() {
  var DI, Service,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  Service = require('./Service');

  DI = (function() {
    DI.prototype.services = null;

    DI.prototype.reserved = ['di'];

    function DI() {
      this.services = {};
    }

    DI.prototype.addService = function(name, service, args) {
      if (args == null) {
        args = [];
      }
      if (__indexOf.call(this.reserved, name) >= 0) {
        throw new Error("DI: name '" + name + "' is reserved by DI");
      }
      this.services[name] = new Service(this, service, args);
      return this.services[name];
    };

    DI.prototype.autowireArguments = function(method, args) {
      var arg, factory, i, methodArgs, num, result, self, _i, _ref,
        _this = this;
      if (args == null) {
        args = [];
      }
      method = method.toString();
      method = method.replace(/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg, '');
      methodArgs = method.slice(method.indexOf('(') + 1, method.indexOf(')')).match(/([^\s,]+)/g);
      methodArgs = methodArgs === null ? [] : methodArgs;
      num = methodArgs.length > args.length ? methodArgs.length : args.length;
      result = [];
      if (num === 0) {
        return result;
      }
      for (i = _i = 0, _ref = num - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        arg = typeof methodArgs[i] === 'undefined' ? null : methodArgs[i];
        if (arg === null) {
          result.push(args[i]);
        } else {
          if (typeof args[i] === 'undefined' || args[i] === '...') {
            factory = false;
            if (arg.match(/Factory$/) !== null) {
              arg = arg.substring(0, arg.length - 7);
              factory = true;
            }
            if (arg === 'di') {
              self = factory === true ? function() {
                return _this;
              } : this;
              result.push(self);
            } else if (this.findDefinitionByName(arg).autowired === false) {
              throw new Error("DI: service " + arg + " can not be autowired");
            } else if (factory === true) {
              result.push(this.getFactory(arg));
            } else {
              result.push(this.getByName(arg));
            }
          } else {
            result.push(args[i]);
          }
        }
      }
      return result;
    };

    DI._newInstanceWrapper = function(obj, args) {
      var f;
      if (args == null) {
        args = [];
      }
      f = function() {
        return obj.apply(this, args);
      };
      f.prototype = obj.prototype;
      return f;
    };

    DI.prototype.createInstance = function(service, args, instantiate) {
      var method;
      if (args == null) {
        args = [];
      }
      if (instantiate == null) {
        instantiate = true;
      }
      if (instantiate === true) {
        service = new (DI._newInstanceWrapper(service, this.autowireArguments(service, args)));
      }
      for (method in service) {
        if (method.match(/^inject/) !== null) {
          service[method].apply(service, this.autowireArguments(service[method], []));
        }
      }
      return service;
    };

    DI.prototype.findDefinitionByName = function(name, need) {
      if (need == null) {
        need = true;
      }
      if (typeof this.services[name] === 'undefined') {
        if (need === true) {
          throw new Error("DI: Service '" + name + "' was not found");
        } else {
          return null;
        }
      }
      return this.services[name];
    };

    DI.prototype.getByName = function(name) {
      return this.findDefinitionByName(name).getInstance();
    };

    DI.prototype.create = function(name) {
      return this.findDefinitionByName(name).create();
    };

    DI.prototype.getFactory = function(name) {
      var _this = this;
      return function() {
        return _this.findDefinitionByName(name).create();
      };
    };

    return DI;

  })();

  module.exports = DI;

}).call(this);
