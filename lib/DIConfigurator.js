// Generated by CoffeeScript 1.6.3
(function() {
  var Configuration, DI, DIConfigurator;

  DI = require('./DI');

  Configuration = require('easy-configuration');

  DIConfigurator = (function() {
    DIConfigurator.EXPOSE_NAME = 'di';

    DIConfigurator.prototype.path = null;

    DIConfigurator.prototype.defaultSetup = {
      windowExpose: false
    };

    DIConfigurator.prototype.defaultService = {
      service: null,
      "arguments": [],
      instantiate: true,
      autowired: true,
      run: false,
      setup: {}
    };

    function DIConfigurator(path) {
      this.path = path;
    }

    DIConfigurator.prototype.create = function() {
      var config, configuration, defaultService, defaultSetup, di, expose, method, name, run, s, service, _i, _len, _ref, _ref1;
      config = new Configuration(this.path);
      defaultService = this.defaultService;
      config.addSection('services').loadConfiguration = function() {
        var name;
        config = this.getConfig();
        for (name in config) {
          if (config.hasOwnProperty(name)) {
            config[name] = this.configurator.merge(config[name], defaultService);
          }
        }
        return config;
      };
      defaultSetup = this.defaultSetup;
      config.addSection('setup').loadConfiguration = function() {
        return this.getConfig(defaultSetup);
      };
      configuration = config.load();
      di = new DI;
      expose = configuration.setup.windowExpose;
      if (expose !== false && typeof window !== 'undefined') {
        name = typeof expose === 'string' ? expose : DIConfigurator.EXPOSE_NAME;
        window[name] = di;
      }
      run = [];
      _ref = configuration.services;
      for (name in _ref) {
        service = _ref[name];
        if (configuration.services.hasOwnProperty(name) && (name !== '__proto__')) {
          s = di.addService(name, service.service, service["arguments"]);
          s.setInstantiate(service.instantiate);
          s.setAutowired(service.autowired);
          _ref1 = service.setup;
          for (method in _ref1) {
            arguments = _ref1[method];
            if (service.setup.hasOwnProperty(method)) {
              s.addSetup(method, arguments);
            }
          }
          if (service.run === true) {
            run.push(name);
          }
        }
      }
      for (_i = 0, _len = run.length; _i < _len; _i++) {
        name = run[_i];
        di.getByName(name);
      }
      return di;
    };

    return DIConfigurator;

  })();

  module.exports = DIConfigurator;

}).call(this);
