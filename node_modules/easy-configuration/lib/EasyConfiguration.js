// Generated by CoffeeScript 1.6.3
(function() {
  var EasyConfiguration, Extension, Helpers;

  Extension = require('./Extension');

  Helpers = require('./Helpers');

  EasyConfiguration = (function() {
    EasyConfiguration.prototype.fileName = null;

    EasyConfiguration.prototype.reserved = ['includes', 'parameters'];

    EasyConfiguration.prototype.extensions = {};

    EasyConfiguration.prototype.files = [];

    EasyConfiguration.prototype.parameters = {};

    EasyConfiguration.prototype.data = null;

    function EasyConfiguration(fileName) {
      this.fileName = fileName;
    }

    EasyConfiguration.prototype.addSection = function(name) {
      return this.addExtension(name, new Extension);
    };

    EasyConfiguration.prototype.addExtension = function(name, extension) {
      if (this.reserved.indexOf(name) !== -1) {
        throw new Error('Extension\'s name ' + name + ' is reserved.');
      }
      extension.configurator = this;
      this.extensions[name] = extension;
      return this.extensions[name];
    };

    EasyConfiguration.prototype.invalidate = function() {
      this.data = null;
      return this;
    };

    EasyConfiguration.prototype.load = function() {
      var config, data;
      if (this.data === null) {
        config = this.loadConfig(this.fileName);
        data = this.parse(config);
        this.files = data.files;
        this.parameters = data.parameters;
        this.data = data.sections;
      }
      return this.data;
    };

    EasyConfiguration.prototype.loadConfig = function(file) {
      var data, include, path, _i, _len, _ref;
      data = require(file);
      if (typeof data.includes !== 'undefined') {
        _ref = data.includes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          include = _ref[_i];
          path = Helpers.normalizePath(Helpers.dirName(file) + '/' + include);
          data = this.merge(data, this.loadConfig(path));
        }
      }
      return data;
    };

    EasyConfiguration.prototype.parse = function(data) {
      var name, result, section, sections, _ref;
      result = {
        files: [],
        parameters: {},
        sections: {}
      };
      if (typeof data.includes !== 'undefined') {
        result.files = data.includes;
      }
      if (typeof data.parameters !== 'undefined') {
        result.parameters = this.expandParameters(data.parameters);
      }
      _ref = this.extensions;
      for (name in _ref) {
        section = _ref[name];
        if (typeof data[name] === 'undefined') {
          data[name] = {};
        }
      }
      sections = data;
      if (typeof sections.parameters !== 'undefined') {
        delete sections.parameters;
      }
      if (typeof sections.includes !== 'undefined') {
        delete sections.includes;
      }
      for (name in sections) {
        section = sections[name];
        if (typeof this.extensions[name] === 'undefined') {
          throw new Error('Found section ' + name + ' but there is no coresponding extension.');
        }
        this.extensions[name].data = section;
        section = this.extensions[name].loadConfiguration();
        section = Helpers.expandWithParameters(section, result.parameters);
        result.sections[name] = section;
      }
      return result;
    };

    EasyConfiguration.prototype.expandParameters = function(parameters) {
      parameters = Helpers.stringifyParameters(parameters);
      parameters = Helpers.expandParameters(parameters);
      parameters = Helpers.objectifyParameters(parameters);
      return parameters;
    };

    EasyConfiguration.prototype.merge = function(left, right) {
      return Helpers.merge(left, right);
    };

    return EasyConfiguration;

  })();

  module.exports = EasyConfiguration;

}).call(this);
