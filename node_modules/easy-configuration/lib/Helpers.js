// Generated by CoffeeScript 1.6.3
(function() {
  var Helpers;

  Helpers = (function() {
    function Helpers() {}

    Helpers.merge = function(left, right) {
      var i, name, type, value, _i, _len;
      type = Object.prototype.toString;
      if (type.call(left) !== type.call(right)) {
        throw new Error('Can not merge two different objects.');
      }
      switch (type.call(left)) {
        case '[object Array]':
          for (i = _i = 0, _len = right.length; _i < _len; i = ++_i) {
            value = right[i];
            if (left.indexOf(value) === -1) {
              left.push(value);
            } else if (type.call(value) === '[object Array]' || type.call(value) === '[object Object]') {
              left[i] = this.merge(left[i], value);
            }
          }
          break;
        case '[object Object]':
          for (name in right) {
            value = right[name];
            if (typeof left[name] === 'undefined') {
              left[name] = value;
            } else if (type.call(value) === '[object Array]' || type.call(value) === '[object Object]') {
              left[name] = this.merge(left[name], value);
            }
          }
      }
      return left;
    };

    Helpers.dirName = function(path) {
      var num;
      num = path.lastIndexOf('/');
      return path.substr(0, num);
    };

    Helpers.normalizePath = function(path) {
      var part, parts, prev, result, _i, _len;
      parts = path.split('/');
      result = [];
      prev = null;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (part === '.' || part === '') {
          continue;
        } else if (part === '..' && prev) {
          result.pop();
        } else {
          result.push(part);
        }
        prev = part;
      }
      return '/' + result.join('/');
    };

    Helpers.stringifyParameters = function(parameters, parent) {
      var name, result, type, value;
      if (parent == null) {
        parent = null;
      }
      result = {};
      for (name in parameters) {
        value = parameters[name];
        name = parent === null ? name : parent + '.' + name;
        type = Object.prototype.toString.call(value);
        if (type === '[object Object]') {
          result = this.merge(result, this.stringifyParameters(value, name));
        } else {
          result[name] = value;
        }
      }
      return result;
    };

    Helpers.expandParameters = function(parameters) {
      var name, parse, result, value;
      parse = function(parameter) {
        var asString, i, param, _i, _len;
        asString = false;
        if (typeof parameter === 'string') {
          asString = true;
          parameter = [parameter];
        }
        for (i = _i = 0, _len = parameter.length; _i < _len; i = ++_i) {
          param = parameter[i];
          parameter[i] = param.replace(/%([a-zA-Z.-_]+)%/g, function(match, variable) {
            if (typeof parameters[variable] === 'undefined') {
              throw new Error('Parameter ' + variable + ' was not found');
            }
            return parse(parameters[variable]);
          });
        }
        if (asString === true) {
          parameter = parameter[0];
        }
        return parameter;
      };
      result = {};
      for (name in parameters) {
        value = parameters[name];
        result[name] = parse(value);
      }
      return result;
    };

    Helpers.expandWithParameters = function(data, parameters) {
      var i, replace, value, _i, _len;
      replace = function(s) {
        return s.replace(/%([a-zA-Z.-_]+)%/g, function(match, variable) {
          if (typeof parameters[variable] === 'undefined') {
            throw new Error('Parameter ' + variable + ' was not found');
          }
          return parameters[variable];
        });
      };
      switch (Object.prototype.toString.call(data)) {
        case '[object String]':
          data = replace(data);
          break;
        case '[object Array]':
          for (i = _i = 0, _len = data.length; _i < _len; i = ++_i) {
            value = data[i];
            data[i] = this.expandWithParameters(value, parameters);
          }
          break;
        case '[object Object]':
          for (i in data) {
            value = data[i];
            data[i] = this.expandWithParameters(value, parameters);
          }
      }
      return data;
    };

    Helpers.objectifyParameters = function(parameters) {
      return parameters;
    };

    return Helpers;

  })();

  module.exports = Helpers;

}).call(this);
