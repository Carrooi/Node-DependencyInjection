{
  "name": "easy-configuration",
  "description": "Simply extensible loader for json config files",
  "version": "1.3.3",
  "author": {
    "name": "David Kudera",
    "email": "sakren@gmail.com"
  },
  "keywords": [
    "config",
    "configurator",
    "configuration",
    "setup",
    "settings",
    "json"
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:sakren/node-easy-configuration.git"
  },
  "license": "MIT",
  "engines": {
    "node": "*"
  },
  "main": "./lib/EasyConfiguration.js",
  "readme": "# Easy Configuration\n\nSimply extensible loader for json config files. This package is inspired by configuration in PHP framework [Nette](http://nette.org/en/).\n\n## Installing\n\n```\n$ npm install -g easy-configuration\n```\n\n## Loading config\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('/var/data/config.json');\n\nvar data = config.load();\n```\n\nBe carefull with setting your path to the config file. Easy-Configuration uses required instead of fs module, because of\nability to use it in browser. If you will set this path relativelly, then it will be relative to the Easy-Configuration\nfile, not to your actual file.\n\n## Parameters\nIn default, this configurator contains two basic sections: parameters and includes.\nParameters section can holds all your variables which you will need in other sections\n\n```\n{\n\t\"parameters\": {\n\t\t\"basePath\": \"./www\",\n\t\t\"shared\": {\n\t\t\t\"styles\": \"%basePath%/css\",\n\t\t\t\"scripts\": \"%basePath%/js\",\n\t\t\t\"translations\": \"%basePath%/lang\"\n\t\t}\n\t}\n}\n```\n\n## Including other config files\nIf you will add section includes, you can set list of files, which you want to merge with main config file.\nPaths to these config files must be relative to main config file.\n\n```\n{\n\t\"includes\": [\n\t\t\"./packages.json\"\n\t]\n}\n```\n\n## Own sections - main feature\nWhen you will try to add own section, Easy Configuration will tell you, that section was found,\nbut there is no corresponding extension.\nThere is example of registration a new one.\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./config.json');\n\nconfig.addSection('packages');\n\nvar data = config.load();\n```\n\nNow you will be able to add new section with name \"packages\"\n\n## Parameters in own sections\nIn your sections, you can use parameters from section \"parameters\".\n\n```\n{\n\t\"packages\": {\n\t\t\"application\": \"%basePath%/application.js\",\n\t\t\"translator\": {\n\t\t\t\"translations\": \"%shared.translations%\",\n\t\t\t\"script\": \"%basePath%/translator.js\"\n\t\t},\n\t\t\"items\": [\n\t\t\t{\n\t\t\t\t\"name\": \"one\",\n\t\t\t\t\"title\": \"First\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"two\",\n\t\t\t\t\"allowed\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"three\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n## Customize packages\nSometimes you may want to customize output of your package. Most simple way is to rewrite method loadConfiguration\nof default Extension class.\nFor example we always want some other data in our section, even if they are not in config file - let's say \"defaults\".\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./config.json');\n\nvar section = config.addSection('packages');\n\nvar defaults = {\n\tapplications: \"\",\n\tstyles: \"\",\n\ttranslator: {\n\t\ttranslations: \"\",\n\t\tscript: \"\"\n\t}\n};\n\nsection.loadConfiguration = function() {\n\treturn this.getConfig(defaults);\n};\n\nvar data = config.load();\n```\n\nMethod getConfig has got one optional argument and it is your defaults variable. This method will return configuration\nonly of your section merged with defaults argument (if any).\nOf course, there can be more complex code.\n\nEasyConfiguration class has got one other useful method and it is merge.\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./config.json');\n\nvar section = config.addSection('packages');\n\nvar defaults = {\n\tapplications: \"\",\n\tstyles: \"\",\n\ttranslator: {\n\t\ttranslations: \"\",\n\t\tscript: \"\"\n\t},\n\t\"items\": []\n};\n\nvar defaultsItems = {\n\t\"name\": \"\",\n\t\"title\": \"\",\n\tallowed: true\n};\n\nsection.loadConfiguration = function() {\n\tvar config = this.getConfig(defaults);\n\n\tfor (var i = 0; i < config.items.length; i++) {\n\t\tconfig.items[i] = this.configurator.merge(config.items[i], defaultsItems);\n\t}\n\n\treturn config;\n};\n\nvar data = config.load();\n```\n\n## Accessing parameters from outside\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./config.json');\n\nvar data = config.load();\nvar parameters = config.parameters;\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/sakren/node-easy-configuration/issues"
  },
  "_id": "easy-configuration@1.3.3",
  "_from": "easy-configuration@latest"
}
