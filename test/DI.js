// Generated by CoffeeScript 1.6.3
(function() {
  var Application, DI, Http, Service, di, dir, path, should;

  should = require('should');

  path = require('path');

  DI = require('../lib/DI');

  Service = require('../lib/Service');

  Application = require('./data/Application');

  Http = require('./data/Http');

  di = new DI;

  dir = path.resolve(__dirname + '/data');

  describe('DI', function() {
    afterEach(function() {
      return di.services = {};
    });
    describe('#addService()', function() {
      it('should return instance of new Service class from object', function() {
        return di.addService('array', Array).should.be.instanceOf(Service);
      });
      it('should return instance of new Service class from path', function() {
        return di.addService('app', "" + dir + "/Application").should.be.instanceOf(Service);
      });
      return it('should throw an error if you try to register service with reserved name', function() {
        return (function() {
          return di.addService('di', DI);
        }).should["throw"]();
      });
    });
    describe('#autowireArguments()', function() {
      it('should return array with services for Application', function() {
        di.addService('array', Array);
        return di.autowireArguments(Application).should.be.eql([[]]);
      });
      it('should return array with services for inject method', function() {
        var args;
        di.addService('http', Http);
        args = di.autowireArguments((new Application([])).injectHttp);
        args.should.have.length(1);
        return args[0].should.be.an.instanceOf(Http);
      });
      it('should return array with services for Application with custom ones', function() {
        var app;
        di.addService('info', ['hello']).setInstantiate(false);
        app = new Application([]);
        return di.autowireArguments(app.prepare, ['simq']);
      });
      return it('should throw an error if service to autowire does not exists', function() {
        return (function() {
          return di.autowireArguments(Application);
        }).should["throw"]();
      });
    });
    describe('#createInstance()', function() {
      beforeEach(function() {
        di.addService('array', Array);
        return di.addService('http', Http);
      });
      it('should return new instance of Application with all dependencies', function() {
        var app;
        app = di.createInstance(Application);
        app.should.be.an.instanceOf(Application);
        app.array.should.be.an.instanceOf(Array);
        return app.http.should.be.an.instanceOf(Http);
      });
      return it('should throw an error when service to inject does not exists', function() {
        delete di.services.http;
        return (function() {
          return di.createInstance(Application);
        }).should["throw"]();
      });
    });
    describe('#findDefinitionByName()', function() {
      it('should return definition of Array service', function() {
        di.addService('array', Array);
        return di.findDefinitionByName('array').should.be.an.instanceOf(Service);
      });
      return it('should throw an error if service is not registered', function() {
        return (function() {
          return di.findDefinitionByName('array');
        }).should["throw"]();
      });
    });
    return describe('Loaders', function() {
      beforeEach(function() {
        di.addService('array', Array);
        di.addService('http', Http);
        di.addService('info', ['hello']).setInstantiate(false);
        di.addService('noArray', ['not this one']).setInstantiate(false).setAutowired(false);
        return di.addService('application', Application).addSetup('prepare', ['simq', '...']);
      });
      describe('#getByName()', function() {
        it('should return instance of Application with all dependencies', function() {
          var app;
          app = di.getByName('application');
          app.should.be.an.instanceOf(Application);
          app.namespace.should.be.equal('simq');
          app.array.should.be.eql([]);
          return app.http.should.be.an.instanceOf(Http);
        });
        it('should return always the same instance of Application', function() {
          return di.getByName('application').should.be.equal(di.getByName('application'));
        });
        it('should return info array without instantiating it', function() {
          return di.getByName('info').should.be.eql(['hello']);
        });
        it('should not set services which are not autowired', function() {
          di.findDefinitionByName('application').addSetup('setData');
          return (function() {
            return di.getByName('application');
          }).should["throw"]();
        });
        return it('should autowire di container into Application instance', function() {
          di.findDefinitionByName('application').addSetup('setDi');
          return di.getByName('application').di.should.be.equal(di);
        });
      });
      describe('#create()', function() {
        return it('should return always new instance of Application', function() {
          return di.create('application').should.not.be.equal(di.create('application'));
        });
      });
      return describe('#getFactory()', function() {
        return it('should return callable factory for Application', function() {
          var factory;
          factory = di.getFactory('application');
          factory.should.be.an.instanceOf(Function);
          return factory().should.be.an.instanceOf(Application);
        });
      });
    });
  });

}).call(this);
