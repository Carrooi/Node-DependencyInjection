(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = require('easy-configuration');
},{"easy-configuration":3}],2:[function(require,module,exports){

module.exports = function(){
  var orig = Error.prepareStackTrace;
  Error.prepareStackTrace = function(_, stack){ return stack; };
  var err = new Error;
  Error.captureStackTrace(err, arguments.callee);
  var stack = err.stack;
  Error.prepareStackTrace = orig;
  return stack;
};

},{}],3:[function(require,module,exports){
(function (__filename){
// Generated by CoffeeScript 1.7.1
(function() {
  var EasyConfiguration, Extension, Helpers, callsite, isWindow, merge, path;

  merge = require('recursive-merge');

  Extension = require('./Extension');

  Helpers = require('./Helpers');

  isWindow = typeof window !== 'undefined';

  if (!isWindow) {
    callsite = require('callsite');
    path = require('path');
  }

  EasyConfiguration = (function() {
    EasyConfiguration.PARAMETER_REGEXP = /%([a-zA-Z.-_]+)%/g;

    EasyConfiguration.prototype.files = null;

    EasyConfiguration.prototype.reserved = null;

    EasyConfiguration.prototype.extensions = null;

    EasyConfiguration.prototype.includes = null;

    EasyConfiguration.prototype._parameters = null;

    EasyConfiguration.prototype.parameters = null;

    EasyConfiguration.prototype.data = null;

    function EasyConfiguration(_path, section) {
      if (_path == null) {
        _path = null;
      }
      if (section == null) {
        section = 'production';
      }
      this.files = {};
      this.reserved = ['includes', 'parameters', 'common'];
      this.extensions = {};
      this.includes = {};
      this._parameters = {};
      this.parameters = {};
      if (_path !== null) {
        this.addConfig(_path, section);
      }
    }

    EasyConfiguration.prototype.addConfig = function(_path, section) {
      var previous, stack;
      if (section == null) {
        section = 'production';
      }
      if (_path[0] === '.' && isWindow) {
        throw new Error('Relative paths to config files are not supported in browser.');
      }
      if (_path[0] === '.') {
        stack = callsite();
        previous = stack[1].getFileName() === __filename ? stack[2] : stack[1];
        _path = path.join(path.dirname(previous.getFileName()), _path);
      }
      if (Helpers.arrayIndexOf(this.reserved, section) === -1) {
        this.reserved.push(section);
      }
      return this.files[_path] = section;
    };

    EasyConfiguration.prototype.addSection = function(name) {
      return this.addExtension(name, new Extension);
    };

    EasyConfiguration.prototype.addExtension = function(name, extension) {
      if (Helpers.arrayIndexOf(this.reserved, name) !== -1) {
        throw new Error('Extension\'s name ' + name + ' is reserved.');
      }
      extension.configurator = this;
      this.extensions[name] = extension;
      return this.extensions[name];
    };

    EasyConfiguration.prototype.removeExtension = function(name) {
      if (typeof this.extensions[name] === 'undefined') {
        throw new Error('Extension with name ' + name + ' was not found.');
      }
      delete this.extensions[name];
      this.invalidate();
      return this;
    };

    EasyConfiguration.prototype.invalidate = function() {
      this.data = null;
      return this;
    };

    EasyConfiguration.prototype.load = function() {
      var config, data, section, _path, _ref;
      if (this.data === null) {
        config = {};
        _ref = this.files;
        for (_path in _ref) {
          section = _ref[_path];
          config = this.merge(this.loadConfig(_path, section), config);
        }
        data = this.parse(config);
        this.includes = data.files;
        this.parameters = data.parameters;
        this.data = data.sections;
      }
      return this.data;
    };

    EasyConfiguration.prototype.loadConfig = function(file, section) {
      var data, include, _data, _i, _len, _path, _ref;
      if (section == null) {
        section = 'production';
      }
      data = require(file);
      data = Helpers.clone(data, false);
      if (typeof data[section] !== 'undefined' || typeof data.common !== 'undefined') {
        if (typeof data.common !== 'undefined') {
          _data = data.common;
          if (typeof data[section] !== 'undefined') {
            _data = this.merge(data[section], _data);
          }
        } else {
          _data = data[section];
        }
        data = _data;
      }
      if (typeof data.includes !== 'undefined') {
        _ref = data.includes;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          include = _ref[_i];
          _path = Helpers.normalizePath(Helpers.dirName(file) + '/' + include);
          data = this.merge(data, this.loadConfig(_path));
        }
      }
      return data;
    };

    EasyConfiguration.prototype.parse = function(data) {
      var name, result, section, sections, _ref;
      result = {
        files: [],
        parameters: {},
        sections: {}
      };
      if (typeof data.includes !== 'undefined') {
        result.files = data.includes;
      }
      if (typeof data.parameters !== 'undefined') {
        this._parameters = data.parameters;
        result.parameters = this.expandParameters(data.parameters);
      }
      _ref = this.extensions;
      for (name in _ref) {
        section = _ref[name];
        if (typeof data[name] === 'undefined') {
          data[name] = {};
        }
      }
      sections = data;
      if (typeof sections.parameters !== 'undefined') {
        delete sections.parameters;
      }
      if (typeof sections.includes !== 'undefined') {
        delete sections.includes;
      }
      for (name in sections) {
        section = sections[name];
        if (sections.hasOwnProperty(name) && (name !== '__proto__')) {
          if (typeof this.extensions[name] === 'undefined') {
            throw new Error('Found section ' + name + ' but there is no coresponding extension.');
          }
          this.extensions[name].data = section;
          section = this.extensions[name].loadConfiguration();
          section = this.expandParameters(section);
          section = this.extensions[name].afterCompile(section);
          result.sections[name] = section;
        }
      }
      return result;
    };

    EasyConfiguration.prototype.expandParameters = function(parameters) {
      var name, param, parse, type, _i, _len, _type;
      _type = Object.prototype.toString;
      parse = (function(_this) {
        return function(name, param) {
          switch (_type.call(param)) {
            case '[object String]':
              return parameters[name] = param.replace(EasyConfiguration.PARAMETER_REGEXP, function(match, variable) {
                var result, _ref;
                result = _this._getParameter(variable, [name]);
                if ((_ref = _type.call(result)) === '[object Object]' || _ref === '[object Array]') {
                  result = '%' + variable + '%';
                }
                return result;
              });
            case '[object Object]':
            case '[object Array]':
              return parameters[name] = _this.expandParameters(param);
            default:
              return parameters[name] = param;
          }
        };
      })(this);
      type = _type.call(parameters);
      switch (type) {
        case '[object Object]':
          for (name in parameters) {
            param = parameters[name];
            parse(name, param);
          }
          break;
        case '[object Array]':
          for (name = _i = 0, _len = parameters.length; _i < _len; name = ++_i) {
            param = parameters[name];
            parse(name, param);
          }
          break;
        default:
          throw new Error("Can not parse " + type + " parameters.");
      }
      return parameters;
    };

    EasyConfiguration.prototype._getParameter = function(parameter, previous) {
      var actual, part, parts, s, _i, _len;
      if (previous == null) {
        previous = [];
      }
      parts = parameter.split('.');
      actual = this._parameters;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (typeof actual[part] === 'undefined') {
          throw new Error("Parameter " + parameter + " is not defined.");
        }
        actual = actual[part];
      }
      if (Helpers.arrayIndexOf(previous, parameter) !== -1) {
        s = previous.length === 1 ? '' : 's';
        previous = previous.join(', ');
        throw new Error("Found circular reference in parameter" + s + " " + previous + ".");
      }
      previous.push(parameter);
      if (typeof actual === 'string') {
        actual = actual.replace(EasyConfiguration.PARAMETER_REGEXP, (function(_this) {
          return function(match, param) {
            var result, _ref;
            result = _this._getParameter(param, previous);
            if ((_ref = Object.prototype.toString.call(result)) === '[object Object]' || _ref === '[object Array]') {
              result = '%' + param + '%';
            }
            return result;
          };
        })(this));
      }
      return actual;
    };

    EasyConfiguration.prototype.getParameter = function(parameter) {
      return this._getParameter(parameter);
    };

    EasyConfiguration.prototype.merge = function(left, right) {
      right = Helpers.clone(right);
      return merge(left, right);
    };

    return EasyConfiguration;

  })();

  module.exports = EasyConfiguration;

}).call(this);

}).call(this,"/../../node_modules/easy-configuration/lib/EasyConfiguration.js")
},{"./Extension":4,"./Helpers":5,"callsite":2,"path":7,"recursive-merge":6}],4:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Extension;

  Extension = (function() {
    function Extension() {}

    Extension.prototype.configurator = null;

    Extension.prototype.data = null;

    Extension.prototype.getConfig = function(defaults) {
      if (defaults == null) {
        defaults = null;
      }
      if (this.data === null) {
        this.configurator.load();
      }
      if (defaults !== null) {
        this.data = this.configurator.merge(this.data, defaults);
      }
      return this.data;
    };

    Extension.prototype.loadConfiguration = function() {
      return this.getConfig();
    };

    Extension.prototype.afterCompile = function(data) {
      return data;
    };

    return Extension;

  })();

  module.exports = Extension;

}).call(this);

},{}],5:[function(require,module,exports){
// Generated by CoffeeScript 1.7.1
(function() {
  var Helpers;

  Helpers = (function() {
    function Helpers() {}

    Helpers.dirName = function(path) {
      var num;
      num = path.lastIndexOf('/');
      return path.substr(0, num);
    };

    Helpers.normalizePath = function(path) {
      var part, parts, prev, result, _i, _len;
      parts = path.split('/');
      result = [];
      prev = null;
      for (_i = 0, _len = parts.length; _i < _len; _i++) {
        part = parts[_i];
        if (part === '.' || part === '') {
          continue;
        } else if (part === '..' && prev) {
          result.pop();
        } else {
          result.push(part);
        }
        prev = part;
      }
      return '/' + result.join('/');
    };

    Helpers.arrayIndexOf = function(array, search) {
      var element, i, _i, _len;
      if (typeof Array.prototype.indexOf !== 'undefined') {
        return array.indexOf(search);
      }
      if (array.length === 0) {
        return -1;
      }
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        element = array[i];
        if (element === search) {
          return i;
        }
      }
      return -1;
    };

    Helpers.clone = function(obj) {
      var key, result, value, _i, _len, _ref, _ref1, _type;
      _type = Object.prototype.toString;
      switch (_type.call(obj)) {
        case '[object Array]':
          result = [];
          for (key = _i = 0, _len = obj.length; _i < _len; key = ++_i) {
            value = obj[key];
            if (value !== null && ((_ref = _type.call(value)) === '[object Array]' || _ref === '[object Object]')) {
              result[key] = Helpers.clone(value);
            } else {
              result[key] = value;
            }
          }
          break;
        case '[object Object]':
          result = {};
          for (key in obj) {
            value = obj[key];
            if (value !== null && ((_ref1 = _type.call(value)) === '[object Array]' || _ref1 === '[object Object]')) {
              result[key] = Helpers.clone(value);
            } else {
              result[key] = value;
            }
          }
          break;
        default:
          return obj;
      }
      return result;
    };

    return Helpers;

  })();

  module.exports = Helpers;

}).call(this);

},{}],6:[function(require,module,exports){
// Generated by CoffeeScript 1.6.3
(function() {
  var isArray, isObject, isScalar, merge, mergeArray, mergeObject, _type,
    __slice = [].slice;

  _type = Object.prototype.toString;

  isScalar = function(variable) {
    var _ref;
    return ((_ref = _type.call(variable)) !== '[object Array]' && _ref !== '[object Object]') || variable === null;
  };

  isObject = function(variable) {
    return variable !== null && _type.call(variable) === '[object Object]';
  };

  isArray = function(variable) {
    return _type.call(variable) === '[object Array]';
  };

  merge = function(left, right) {
    var leftType, rightType;
    if (isScalar(left) || isScalar(right)) {
      throw new Error('Can not merge scalar objects.');
    }
    leftType = _type.call(left);
    rightType = _type.call(right);
    if (leftType !== rightType) {
      throw new Error('Can not merge ' + leftType + ' with ' + rightType + '.');
    }
    switch (leftType) {
      case '[object Array]':
        return mergeArray(left, right);
      case '[object Object]':
        return mergeObject(left, right);
      default:
        throw new Error('Can not merge ' + leftType + ' objects.');
    }
  };

  mergeArray = function(left, right) {
    var add, i, leftValue, rightValue, value, _i, _j, _len, _len1;
    add = [];
    for (i = _i = 0, _len = right.length; _i < _len; i = ++_i) {
      rightValue = right[i];
      leftValue = left[i];
      if ((isObject(leftValue) && isObject(rightValue)) || (isArray(leftValue) && isArray(rightValue))) {
        left[i] = merge(leftValue, rightValue);
      } else if (isObject(rightValue)) {
        add.push(merge({}, rightValue));
      } else if (isArray(rightValue)) {
        add.push(merge([], rightValue));
      } else {
        add.push(rightValue);
      }
    }
    for (_j = 0, _len1 = add.length; _j < _len1; _j++) {
      value = add[_j];
      left.push(value);
    }
    return left;
  };

  mergeObject = function(left, right) {
    var key, mergeWith, value;
    for (key in right) {
      value = right[key];
      if (right.hasOwnProperty(key) && (key !== '__proto__')) {
        if (isScalar(value)) {
          if (!left.hasOwnProperty(key)) {
            left[key] = value;
          }
        } else {
          if (left.hasOwnProperty(key)) {
            left[key] = merge(left[key], value);
          } else {
            mergeWith = isObject(value) ? {} : [];
            left[key] = merge(mergeWith, value);
          }
        }
      }
    }
    return left;
  };

  module.exports = function() {
    var left, r, right, _i, _len;
    left = arguments[0], right = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (_i = 0, _len = right.length; _i < _len; _i++) {
      r = right[_i];
      left = merge(left, r);
    }
    return left;
  };

}).call(this);

},{}],7:[function(require,module,exports){
(function (process){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// Split a filename into [root, dir, basename, ext], unix version
// 'root' is just a slash, or nothing.
var splitPathRe =
    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
var splitPath = function(filename) {
  return splitPathRe.exec(filename).slice(1);
};

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function(path) {
  var result = splitPath(path),
      root = result[0],
      dir = result[1];

  if (!root && !dir) {
    // No dirname whatsoever
    return '.';
  }

  if (dir) {
    // It has a dirname, strip trailing slash
    dir = dir.substr(0, dir.length - 1);
  }

  return root + dir;
};


exports.basename = function(path, ext) {
  var f = splitPath(path)[2];
  // TODO: make this comparison case-insensitive on windows?
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};


exports.extname = function(path) {
  return splitPath(path)[3];
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

}).call(this,require("oMfpAn"))
},{"oMfpAn":8}],8:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};

process.nextTick = (function () {
    var canSetImmediate = typeof window !== 'undefined'
    && window.setImmediate;
    var canPost = typeof window !== 'undefined'
    && window.postMessage && window.addEventListener
    ;

    if (canSetImmediate) {
        return function (f) { return window.setImmediate(f) };
    }

    if (canPost) {
        var queue = [];
        window.addEventListener('message', function (ev) {
            var source = ev.source;
            if ((source === window || source === null) && ev.data === 'process-tick') {
                ev.stopPropagation();
                if (queue.length > 0) {
                    var fn = queue.shift();
                    fn();
                }
            }
        }, true);

        return function nextTick(fn) {
            queue.push(fn);
            window.postMessage('process-tick', '*');
        };
    }

    return function nextTick(fn) {
        setTimeout(fn, 0);
    };
})();

process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
}

// TODO(shtylman)
process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};

},{}],9:[function(require,module,exports){
var DI, Defaults, Helpers, Service,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Service = require('./Service');

Helpers = require('./Helpers');

Defaults = require('./Defaults');

DI = (function() {
  DI.prototype.services = null;

  DI.prototype.parameters = null;

  DI.prototype.config = null;

  DI.prototype.paths = null;

  DI.prototype.reserved = ['di'];

  DI.prototype.creating = null;

  DI.prototype.basePath = null;

  DI.prototype.instantiate = true;

  function DI() {
    this.services = {};
    this.paths = {};
    this.creating = [];
    new Defaults(this);
  }

  DI.prototype.getParameter = function(parameter) {
    if (this.config === null) {
      throw new Error('DI container was not created with DIFactory.');
    }
    return this.config.getParameter(parameter);
  };

  DI.prototype.getPath = function(name) {
    return (this.basePath === null ? '' : this.basePath + '/') + name;
  };

  DI.prototype.addService = function(name, service, args) {
    var arg, i, originalService, _i, _len;
    if (args == null) {
      args = [];
    }
    if (__indexOf.call(this.reserved, name) >= 0 && typeof this.services[name] !== 'undefined') {
      throw new Error("DI: name '" + name + "' is reserved by DI.");
    }
    originalService = service;
    if (typeof service === 'string') {
      if (service.match(/^(factory\:)?[@$]/)) {
        service = this.tryCallArgument(service);
      } else {
        service = this.resolveModulePath(service);
        if (service === null) {
          throw new Error("Service '" + originalService + "' can not be found.");
        }
        this.paths[service] = name;
      }
    }
    for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
      arg = args[i];
      args[i] = this.tryCallArgument(arg);
    }
    this.services[name] = new Service(this, name, service, args);
    this.services[name].setInstantiate(this.instantiate);
    return this.services[name];
  };

  DI.prototype.resolveModulePath = function(_path) {
    var get;
    get = function(p) {
      var err;
      try {
        return require.resolve(p);
      } catch (_error) {
        err = _error;
        return null;
      }
    };
    return get(_path) || get(this.getPath(_path)) || get(Helpers.normalizePath(_path)) || get(Helpers.normalizePath(this.getPath(_path)));
  };

  DI.prototype.tryCallArgument = function(arg) {
    var a, after, args, factory, i, match, original, pos, service, sub, type, _i, _len;
    if (typeof arg !== 'string') {
      return arg;
    }
    if (this.config !== null && (match = arg.match(/^%([a-zA-Z.-_]+)%$/))) {
      return this.getParameter(match[1]);
    }
    if (!arg.match(/^(factory\:)?[@$]/)) {
      return arg;
    }
    factory = false;
    if (arg.match(/^factory\:/)) {
      factory = true;
      arg = arg.substr(8);
    }
    type = arg[0] === '@' ? 'service' : 'path';
    original = arg;
    arg = arg.substr(1);
    service = null;
    after = [];
    if ((pos = arg.indexOf('::')) !== -1) {
      after = arg.substr(pos + 2).split('::');
      arg = arg.substr(0, pos);
    }
    if (type === 'service') {
      service = factory ? this.getFactory(arg) : this.get(arg);
    } else if (type === 'path') {
      service = factory ? this.getFactoryByPath(arg) : this.getByPath(arg);
    }
    if (service === null) {
      throw new Error("Service '" + arg + "' can not be found.");
    }
    if (after.length > 0) {
      args = [];
      while (after.length > 0) {
        sub = after.shift();
        if ((match = sub.match(/^(.+)\((.*)\)$/)) !== null) {
          sub = match[1];
          args = match[2].split(',');
          for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
            a = args[i];
            a = a.trim();
            if ((match = a.match(/'(.*)'/)) || (match = a.match(/"(.*)"/))) {
              args[i] = match[1];
            } else if (this.config !== null && (match = a.match(/^%([a-zA-Z.-_]+)%$/))) {
              args[i] = this.getParameter(match[1]);
            } else {
              args[i] = this.tryCallArgument(a);
            }
          }
        }
        if (typeof service[sub] === 'undefined') {
          throw new Error("Can not access '" + sub + "' in '" + original + "'.");
        }
        if (Object.prototype.toString.call(service[sub]) === '[object Function]') {
          service = this.inject(service[sub], args, service);
        } else {
          service = service[sub];
        }
      }
    }
    return service;
  };

  DI.prototype.autowireArguments = function(method, args) {
    if (args == null) {
      args = [];
    }
    Helpers.log('Method autowireArguments is deprecated, use the same method in Helpers class.');
    return Helpers.autowireArguments(method, args, this);
  };

  DI.prototype.createInstance = function(service, args, instantiate) {
    if (args == null) {
      args = [];
    }
    if (instantiate == null) {
      instantiate = true;
    }
    if (instantiate === true) {
      if (Object.prototype.toString.call(service.prototype.constructor) === '[Function]') {
        service = this.inject(service, args, {});
      } else {
        service = Helpers.createInstance(service, args, this);
      }
    }
    return service;
  };

  DI.prototype.inject = function(fn, args, scope) {
    if (args == null) {
      args = [];
    }
    if (scope == null) {
      scope = {};
    }
    if (!(fn instanceof Function)) {
      throw new Error('DI: Inject method can be called only on functions.');
    }
    args = Helpers.autowireArguments(fn, args, this);
    return fn.apply(scope, args);
  };

  DI.prototype.hasDefinition = function(name) {
    return typeof this.services[name] !== 'undefined';
  };

  DI.prototype.findDefinitionByName = function(name, need) {
    if (need == null) {
      need = true;
    }
    if (!this.hasDefinition(name)) {
      if (need === true) {
        throw new Error("DI: Service '" + name + "' was not found.");
      } else {
        return null;
      }
    }
    return this.services[name];
  };

  DI.prototype.getByName = function(name) {
    Helpers.log('DI: Method getByName is deprecated, use get method.');
    return this.get(name);
  };

  DI.prototype.getByPath = function(path) {
    path = this.resolveModulePath(path);
    if (path !== null && typeof this.paths[path] !== 'undefined') {
      return this.get(this.paths[path]);
    }
    return null;
  };

  DI.prototype.getFactoryByPath = function(path) {
    path = this.resolveModulePath(path);
    if (path !== null && typeof this.paths[path] !== 'undefined') {
      return this.getFactory(this.paths[path]);
    }
    return null;
  };

  DI.prototype.get = function(name) {
    return this.findDefinitionByName(name).getInstance();
  };

  DI.prototype.create = function(name) {
    return this.findDefinitionByName(name).create();
  };

  DI.prototype.getFactory = function(name) {
    return (function(_this) {
      return function() {
        return _this.findDefinitionByName(name).create();
      };
    })(this);
  };

  return DI;

})();

module.exports = DI;



},{"./Defaults":11,"./Helpers":12,"./Service":13}],10:[function(require,module,exports){
(function (global){
var Configuration, DI, DIFactory, Helpers, callsite, isWindow, path;

DI = require('./DI');

Helpers = require('./Helpers');

Configuration = require('easy-configuration');

isWindow = typeof window !== 'undefined';

if (!isWindow) {
  callsite = require('callsite');
  path = require('path');
}

DIFactory = (function() {
  DIFactory.EXPOSE_NAME = 'di';

  DIFactory.prototype.config = null;

  DIFactory.prototype.path = null;

  DIFactory.prototype.basePath = null;

  DIFactory.prototype.defaultDefaults = {
    instantiate: true
  };

  DIFactory.prototype.defaultSetup = {
    windowExpose: null,
    expose: false
  };

  DIFactory.prototype.defaultService = {
    service: null,
    "arguments": [],
    instantiate: null,
    autowired: true,
    run: false,
    setup: {}
  };

  function DIFactory(pathOrConfig) {
    var section, stack, _path, _ref;
    if (typeof pathOrConfig === 'string') {
      if (pathOrConfig[0] === '.' && isWindow) {
        throw new Error('Relative paths to config files are not supported in browser.');
      }
      if (pathOrConfig[0] === '.') {
        stack = callsite();
        this.basePath = path.dirname(stack[1].getFileName());
        pathOrConfig = path.join(this.basePath, pathOrConfig);
      }
      this.path = pathOrConfig;
      this.config = new Configuration(this.path);
    } else if (pathOrConfig instanceof Configuration) {
      this.config = pathOrConfig;
    } else {
      throw new Error('Bad argument');
    }
    if (this.basePath === null) {
      _ref = this.config.files;
      for (_path in _ref) {
        section = _ref[_path];
        break;
      }
      this.basePath = Helpers.dirName(_path);
    }
  }

  DIFactory.prototype.create = function() {
    var configuration, defaultDefaults, defaultService, defaultSetup, di, expose, method, name, run, s, service, _i, _len, _ref, _ref1;
    defaultService = this.defaultService;
    this.config.addSection('services').loadConfiguration = function() {
      var config, name;
      config = this.getConfig();
      for (name in config) {
        if (config.hasOwnProperty(name) && (name !== '__proto__')) {
          config[name] = this.configurator.merge(config[name], defaultService);
        }
      }
      return config;
    };
    defaultSetup = this.defaultSetup;
    this.config.addSection('setup').loadConfiguration = function() {
      return this.getConfig(defaultSetup);
    };
    defaultDefaults = this.defaultDefaults;
    this.config.addSection('defaults').loadConfiguration = function() {
      return this.getConfig(defaultDefaults);
    };
    configuration = this.config.load();
    di = new DI;
    if (this.basePath !== null) {
      di.basePath = this.basePath;
    }
    di.config = this.config;
    di.parameters = this.config.parameters;
    di.instantiate = configuration.defaults.instantiate;
    if (configuration.setup.windowExpose !== null) {
      console.log('Option windowExpose is deprecated. Please use expose.');
      configuration.setup.expose = configuration.setup.windowExpose;
    }
    expose = configuration.setup.expose;
    if (expose !== false) {
      name = typeof expose === 'string' ? expose : DIFactory.EXPOSE_NAME;
      if (typeof window !== 'undefined') {
        window[name] = di;
      } else if (typeof global !== 'undefined') {
        global[name] = di;
      }
    }
    run = [];
    _ref = configuration.services;
    for (name in _ref) {
      service = _ref[name];
      if (configuration.services.hasOwnProperty(name) && (name !== '__proto__')) {
        if (service.instantiate === null) {
          if (service.service.match(/^(factory\:)?[@$]/)) {
            service.instantiate = false;
          } else {
            service.instantiate = true;
          }
        }
        s = di.addService(name, service.service, service["arguments"]);
        s.setInstantiate(service.instantiate);
        s.setAutowired(service.autowired);
        _ref1 = service.setup;
        for (method in _ref1) {
          arguments = _ref1[method];
          if (service.setup.hasOwnProperty(method)) {
            s.addSetup(method, arguments);
          }
        }
        if (service.run === true) {
          run.push(name);
        }
      }
    }
    for (_i = 0, _len = run.length; _i < _len; _i++) {
      name = run[_i];
      di.get(name);
    }
    return di;
  };

  return DIFactory;

})();

module.exports = DIFactory;



}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./DI":9,"./Helpers":12,"callsite":2,"easy-configuration":3,"path":7}],11:[function(require,module,exports){
(function (global){
var Defaults, isWindow;

isWindow = typeof window !== 'undefined';

Defaults = (function() {
  function Defaults(di) {
    di.addService('di', di).setInstantiate(false);
    di.addService('timer', this.getTimer()).setInstantiate(false);
    if (isWindow) {
      di.addService('window', window).setInstantiate(false);
      di.addService('document', window.document).setInstantiate(false);
    } else {
      di.addService('global', global).setInstantiate(false);
    }
  }

  Defaults.prototype.getTimer = function() {
    var main;
    main = isWindow ? window : global;
    return {
      setTimeout: function(callback, delay) {
        return main.setTimeout.apply(main, arguments);
      },
      setInterval: function(callback, delay) {
        return main.setInterval.apply(main, arguments);
      },
      clearTimeout: function(timeoutID) {
        return main.clearTimeout.call(main, timeoutID);
      },
      clearInterval: function(intervalID) {
        return main.clearInterval.call(main, intervalID);
      }
    };
  };

  return Defaults;

})();

module.exports = Defaults;



}).call(this,typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],12:[function(require,module,exports){
var Helpers;

Helpers = (function() {
  function Helpers() {}

  Helpers.clone = function(obj) {
    var key, result, value, _i, _len, _ref, _ref1, _type;
    _type = Object.prototype.toString;
    switch (_type.call(obj)) {
      case '[object Array]':
        result = [];
        for (key = _i = 0, _len = obj.length; _i < _len; key = ++_i) {
          value = obj[key];
          if ((_ref = _type.call(value)) === '[object Array]' || _ref === '[object Object]') {
            result[key] = Helpers.clone(value);
          } else {
            result[key] = value;
          }
        }
        break;
      case '[object Object]':
        result = {};
        for (key in obj) {
          value = obj[key];
          if ((_ref1 = _type.call(value)) === '[object Array]' || _ref1 === '[object Object]') {
            result[key] = Helpers.clone(value);
          } else {
            result[key] = value;
          }
        }
        break;
      default:
        return obj;
    }
    return result;
  };

  Helpers.dirName = function(path) {
    var num;
    num = path.lastIndexOf('/');
    return path.substr(0, num);
  };

  Helpers.normalizePath = function(path) {
    var part, parts, prev, result, _i, _len;
    parts = path.split('/');
    result = [];
    prev = null;
    for (_i = 0, _len = parts.length; _i < _len; _i++) {
      part = parts[_i];
      if (part === '.' || part === '') {
        continue;
      } else if (part === '..' && prev) {
        result.pop();
      } else {
        result.push(part);
      }
      prev = part;
    }
    return '/' + result.join('/');
  };

  Helpers.log = function(message) {
    if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
      return console.log(message);
    }
  };

  Helpers.arrayIndexOf = function(array, search) {
    var element, i, _i, _len;
    if (typeof Array.prototype.indexOf !== 'undefined') {
      return array.indexOf(search);
    }
    if (array.length === 0) {
      return -1;
    }
    for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
      element = array[i];
      if (element === search) {
        return i;
      }
    }
    return -1;
  };

  Helpers.createInstance = function(service, args, container) {
    var wrapper;
    if (args == null) {
      args = [];
    }
    wrapper = function(obj, args) {
      var f;
      if (args == null) {
        args = [];
      }
      f = function() {
        return obj.apply(this, args);
      };
      f.prototype = obj.prototype;
      return f;
    };
    return new (wrapper(service, Helpers.autowireArguments(service, args, container)));
  };

  Helpers.getArguments = function(method) {
    var args, e;
    try {
      method = method.toString();
    } catch (_error) {
      e = _error;
      throw new Error('Can not call toString on method');
    }
    args = method.slice(method.indexOf('(') + 1, method.indexOf(')')).match(/([^\s,]+)/g);
    args = args === null ? [] : args;
    return args;
  };

  Helpers.getHintArguments = function(method) {
    var arg, args, body, e, i, _i, _len;
    try {
      method = method.toString();
    } catch (_error) {
      e = _error;
      throw new Error('Can not call toString on method');
    }
    body = method.slice(method.indexOf("{") + 1, method.lastIndexOf("}"));
    args = body.match(/{\s*['"]@di:inject['"]\s*:\s*\[(.+)\]\s*}/);
    if (args !== null) {
      args = args[1].split(',');
      for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
        arg = args[i];
        args[i] = arg.replace(/^\s*['"]/, '').replace(/['"]$/, '');
      }
      return args;
    }
    return null;
  };

  Helpers.autowireArguments = function(method, args, container) {
    var dots, factory, hints, i, parameter, previousDots, result, service, _i, _len, _ref;
    if (args == null) {
      args = [];
    }
    result = [];
    factory = false;
    dots = false;
    previousDots = false;
    hints = Helpers.getHintArguments(method);
    if (hints !== null) {
      args = hints;
    }
    args = Helpers.clone(args);
    _ref = Helpers.getArguments(method);
    for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
      parameter = _ref[i];
      if (typeof args[0] !== 'undefined' && args[0] === '...') {
        dots = true;
      }
      if (typeof args[0] === 'undefined' || dots || (container.hasDefinition(parameter) && previousDots)) {
        if (parameter.match(/Factory$/) !== null) {
          parameter = parameter.substring(0, parameter.length - 7);
          factory = true;
        }
        service = container.findDefinitionByName(parameter);
        if (service.autowired === false) {
          throw new Error("DI: Service '" + parameter + "' in not autowired.");
        }
        if (factory === true) {
          result.push(container.getFactory(parameter));
        } else {
          result.push(container.get(parameter));
        }
        if (dots) {
          args.shift();
        }
        previousDots = true;
      } else {
        result.push(container.tryCallArgument(args[0]));
        previousDots = false;
        args.shift();
      }
      factory = false;
      dots = false;
    }
    return result;
  };

  return Helpers;

})();

module.exports = Helpers;



},{}],13:[function(require,module,exports){
var Helpers, Service;

Helpers = require('./Helpers');

Service = (function() {
  Service.prototype.di = null;

  Service.prototype.name = null;

  Service.prototype.service = null;

  Service.prototype["arguments"] = null;

  Service.prototype.instantiate = true;

  Service.prototype.autowired = true;

  Service.prototype.setup = null;

  Service.prototype.instance = null;

  function Service(di, name, service, _arguments) {
    this.di = di;
    this.name = name;
    this.service = service;
    this["arguments"] = _arguments != null ? _arguments : [];
    this.setup = {};
  }

  Service.prototype.getInstance = function() {
    if (this.instance === null) {
      this.instance = this.create();
    }
    return this.instance;
  };

  Service.prototype.create = function() {
    var args, e, method, names, s, service, _ref;
    if (Helpers.arrayIndexOf(this.di.creating, this.name) !== -1) {
      s = this.di.creating.length === 1 ? '' : 's';
      names = this.di.creating.join(', ');
      throw new Error("Circular reference detected for service" + s + ": " + names + ".");
    }
    this.di.creating.push(this.name);
    service = this.service;
    if (Object.prototype.toString.call(service) === '[object String]') {
      service = require(service);
    }
    try {
      service = this.di.createInstance(service, this["arguments"], this.instantiate);
      _ref = this.setup;
      for (method in _ref) {
        args = _ref[method];
        if (this.setup.hasOwnProperty(method)) {
          if (typeof service[method] === 'function') {
            service[method].apply(service, Helpers.autowireArguments(service[method], args, this.di));
          } else {
            service[method] = args;
          }
        }
      }
    } catch (_error) {
      e = _error;
      this.di.creating.splice(Helpers.arrayIndexOf(this.di.creating, this.name), 1);
      throw e;
    }
    this.di.creating.splice(Helpers.arrayIndexOf(this.di.creating, this.name), 1);
    return service;
  };

  Service.prototype.addSetup = function(method, args) {
    if (args == null) {
      args = [];
    }
    this.setup[method] = args;
    return this;
  };

  Service.prototype.setInstantiate = function(instantiate) {
    this.instantiate = instantiate;
    return this;
  };

  Service.prototype.setAutowired = function(autowired) {
    this.autowired = autowired;
    return this;
  };

  return Service;

})();

module.exports = Service;



},{"./Helpers":12}],14:[function(require,module,exports){
require('callsite');

require('./tests/Helpers');

require('./tests/DI');

require('./tests/DIFactory');



},{"./tests/DI":15,"./tests/DIFactory":16,"./tests/Helpers":17,"callsite":2}],15:[function(require,module,exports){
var Application, DI, Http, Service, di, dir;

DI = require('../../../src/DI');

Service = require('../../../src/Service');

Application = require('../../data/Application');

Http = require('../../data/Http');

dir = '../../data';

di = null;

describe('DI', function() {
  beforeEach(function() {
    return di = new DI;
  });
  describe('defaults', function() {
    it('should be added di into services', function() {
      return expect(di.get('di')).to.be.equal(di);
    });
    it('should be added timer service', function(done) {
      var timer;
      timer = di.get('timer');
      expect(timer).to.have.keys(['setTimeout', 'setInterval', 'clearTimeout', 'clearInterval']);
      return timer.setTimeout(function() {
        return done();
      }, 100);
    });
    it('should be added window object service', function() {
      return expect(di.get('window')).to.be.equal(window);
    });
    return it('should be added document object service', function() {
      return expect(di.get('document')).to.be.equal(window.document);
    });
  });
  describe('#addService()', function() {
    it('should return instance of new Service class from object', function() {
      return expect(di.addService('array', Array)).to.be.an["instanceof"](Service);
    });
    it.skip('should return instance of new Service class from path', function() {
      return expect(di.addService('app', "" + dir + "/Application")).to.be.an["instanceof"](Service);
    });
    it('should throw an error if you try to register service with reserved name', function() {
      return expect(function() {
        return di.addService('di', DI);
      }).to["throw"](Error, "DI: name 'di' is reserved by DI.");
    });
    return it.skip('should create service with null as arguments', function() {
      di.addService('http', "" + dir + "/Http");
      di.addService('app', "" + dir + "/Application", [null]);
      return expect(di.get('app').array).to.not.exists;
    });
  });
  describe('#tryCallArgument()', function() {
    it('should just return argument if it is not string', function() {
      return expect(di.tryCallArgument(new Date)).to.be.an["instanceof"](Date);
    });
    it('should just return argument if it is not in right format', function() {
      return expect(di.tryCallArgument('hello word')).to.be.equal('hello word');
    });
    it('should return service by its name', function() {
      di.addService('date', Date);
      return expect(di.tryCallArgument('@date')).to.be.an["instanceof"](Date);
    });
    it.skip('should return service by its path', function() {
      di.addService('callsite', 'callsite').setInstantiate(false);
      return expect(di.tryCallArgument('$callsite')).to.be.equal(require('callsite'));
    });
    it('should return factory by its name', function() {
      var factory;
      di.addService('date', Date);
      factory = di.tryCallArgument('factory:@date');
      expect(factory).to.be.an["instanceof"](Function);
      return expect(factory()).to.be.an["instanceof"](Date);
    });
    it.skip('should return factory by its path', function() {
      var factory;
      di.addService('callsite', 'callsite').setInstantiate(false);
      factory = di.tryCallArgument('factory:$callsite');
      expect(factory).to.be.an["instanceof"](Function);
      return expect(factory()).to.be.equal(require('callsite'));
    });
    it('should return result from method in service', function() {
      di.addService('obj', {
        doSomething: function() {
          return 'hello';
        }
      }).setInstantiate(false);
      return expect(di.tryCallArgument('@obj::doSomething')).to.be.equal('hello');
    });
    it('should return result from method with arguments', function() {
      di.addService('obj', {
        doSomething: function(one, two, three) {
          return one + two + three;
        }
      }).setInstantiate(false);
      return expect(di.tryCallArgument('@obj::doSomething("hello", " ", "word")')).to.be.equal('hello word');
    });
    return it('should return result from method with arguments with sub calls to di', function() {
      di.addService('obj', {
        complete: function() {
          return {
            callMe: function(greetings, name) {
              return greetings + ' ' + name;
            }
          };
        }
      }).setInstantiate(false);
      return expect(di.tryCallArgument('@obj::complete::callMe("hello", "David")')).to.be.equal('hello David');
    });
  });
  describe('#createInstance()', function() {
    beforeEach(function() {
      di.addService('array', Array);
      return di.addService('http', Http);
    });
    it('should return new instance of Application with all dependencies', function() {
      var app;
      app = di.createInstance(Application);
      expect(app).to.be.an["instanceof"](Application);
      expect(app.array).to.be.an["instanceof"](Array);
      return expect(app.http).to.not.exists;
    });
    return it('should throw an error when service to inject does not exists', function() {
      var app;
      delete di.services.http;
      app = di.createInstance(Application);
      return expect(function() {
        return di.inject(app.setHttp, [], app);
      }).to["throw"](Error, "DI: Service 'http' was not found.");
    });
  });
  describe('#findDefinitionByName()', function() {
    it('should return definition of Array service', function() {
      di.addService('array', Array);
      return expect(di.findDefinitionByName('array')).to.be.an["instanceof"](Service);
    });
    return it('should throw an error if service is not registered', function() {
      return expect(function() {
        return di.findDefinitionByName('array');
      }).to["throw"](Error, "DI: Service 'array' was not found.");
    });
  });
  return describe('Loaders', function() {
    beforeEach(function() {
      di.addService('array', Array);
      di.addService('http', Http);
      di.addService('info', ['hello']).setInstantiate(false);
      di.addService('noArray', ['not this one']).setInstantiate(false).setAutowired(false);
      return di.addService('application', Application).addSetup('prepare', ['simq', '...']);
    });
    describe('#get()', function() {
      it('should return instance of Application with all dependencies', function() {
        var app;
        app = di.get('application');
        expect(app).to.be.an["instanceof"](Application);
        expect(app.namespace).to.be.equal('simq');
        expect(app.array).to.be.eql([]);
        return expect(app.http).to.not.exists;
      });
      it('should return always the same instance of Application', function() {
        return expect(di.get('application')).to.be.equal(di.get('application'));
      });
      it.skip('should add service from node_modules', function() {
        di.addService('callsite', 'callsite').setInstantiate(false);
        return expect(di.get('callsite')).to.be.equal(require('callsite'));
      });
      it('should return info array without instantiating it', function() {
        return expect(di.get('info')).to.be.eql(['hello']);
      });
      it('should not set services which are not autowired', function() {
        di.findDefinitionByName('application').addSetup('setData');
        return expect(function() {
          return di.get('application');
        }).to["throw"](Error, "DI: Service 'noArray' in not autowired.");
      });
      it('should autowire di container into Application instance', function() {
        di.findDefinitionByName('application').addSetup('setDi');
        return expect(di.get('application').di).to.be.equal(di);
      });
      it('should autowire di container factory into Application instance', function() {
        var factory;
        di.findDefinitionByName('application').addSetup('setDiFactory');
        factory = di.get('application').diFactory;
        expect(factory).to.be.an["instanceof"](Function);
        return expect(factory()).to.be.equal(di);
      });
      it('should set info property directly', function() {
        di.findDefinitionByName('application').addSetup('info', 'by property');
        return expect(di.get('application').info).to.be.equal('by property');
      });
      it('should throw an error if circular reference was found', function() {
        di.addService('first', function(second) {});
        di.addService('second', function(first) {});
        return expect(function() {
          return di.get('first');
        }).to["throw"](Error, 'Circular reference detected for services: first, second.');
      });
      it('should throw an error with simple circular reference', function() {
        di.addService('first', function(first) {});
        return expect(function() {
          return di.get('first');
        }).to["throw"](Error, 'Circular reference detected for service: first.');
      });
      return it('should throw an error with advanced circular reference', function() {
        di.addService('first', function(second) {});
        di.addService('second', function(third) {});
        di.addService('third', function(fourth) {});
        di.addService('fourth', function(first) {});
        return expect(function() {
          return di.get('first');
        }).to["throw"](Error, 'Circular reference detected for services: first, second, third, fourth.');
      });
    });
    describe('#getByPath()', function() {
      it.skip('should return service by require path', function() {
        di.addService('app', "" + dir + "/Application");
        return expect(di.getByPath("" + dir + "/Application")).to.be.an["instanceof"](Application);
      });
      return it('should return null for not auto required services', function() {
        di.addService('info', ['hello']).setInstantiate(false);
        return expect(di.getByPath('info')).to.not.exists;
      });
    });
    describe('#create()', function() {
      return it('should return always new instance of Application', function() {
        return expect(di.create('application')).to.not.be.equal(di.create('application'));
      });
    });
    describe('#getFactory()', function() {
      return it('should return callable factory for Application', function() {
        var factory;
        factory = di.getFactory('application');
        expect(factory).to.be.an["instanceof"](Function);
        return expect(factory()).to.be.an["instanceof"](Application);
      });
    });
    return describe('#inject()', function() {
      it('should inject some service into annonymous function', function(done) {
        di.addService('array', Array);
        return di.inject(function(array) {
          expect(array).to.be.eql([]);
          return done();
        });
      });
      return it('should throw an error if inject method is not called on function', function() {
        return expect(function() {
          return di.inject('');
        }).to["throw"](Error, "DI: Inject method can be called only on functions.");
      });
    });
  });
});



},{"../../../src/DI":9,"../../../src/Service":13,"../../data/Application":18,"../../data/Http":20,"callsite":2}],16:[function(require,module,exports){
var Configuration, DI, DIFactory, Http, di, dir, factory;

DI = require('../../../src/DI');

DIFactory = require('../../../src/DIFactory');

Configuration = require('../../../Configuration');

dir = '../../data';

Http = require('../../data/Http');

di = null;

factory = null;

describe.skip('DIFactory', function() {
  beforeEach(function() {
    factory = new DIFactory(dir + '/config.json');
    di = factory.create();
    return di.basePath = dir;
  });
  describe('#constructor()', function() {
    it('should throw an error for relative paths', function() {
      return expect(function() {
        return new DIFactory('../data/config.json');
      }).to["throw"](Error, 'Relative paths to config files are not supported in browser.');
    });
    return it('should create di with custom config object', function() {
      var config;
      config = new Configuration;
      config.addConfig("" + dir + "/config.json");
      config.addConfig("" + dir + "/sections.json", 'local');
      factory = new DIFactory(config);
      di = factory.create();
      expect(di).to.be.an["instanceof"](DI);
      return expect(di.parameters.users.david).to.be.equal('divad');
    });
  });
  describe('#parameters', function() {
    return it('should contain all parameters', function() {
      return expect(di.parameters).to.be.eql({
        language: 'en',
        users: {
          david: '123456',
          admin: 'nimda'
        },
        database: {
          user: 'admin',
          password: 'nimda'
        }
      });
    });
  });
  describe('#getParameter()', function() {
    it('should throw an error if di object was not created from DIFactory', function() {
      di = new DI;
      return expect(function() {
        return di.getParameter('buf');
      }).to["throw"](Error, 'DI container was not created with DIFactory.');
    });
    return it('should return expanded parameter', function() {
      return expect(di.getParameter('database.password')).to.be.equal('nimda');
    });
  });
  return describe('#get()', function() {
    it('should load service defined with relative path', function() {
      factory = new DIFactory(dir + '/relative.json');
      di = factory.create();
      return expect(di.get('http')).to.be.an["instanceof"](Http);
    });
    it('should create services with derived arguments', function() {
      var application;
      factory = new DIFactory(dir + '/derivedArguments.json');
      di = factory.create();
      application = di.get('application');
      expect(application.data).to.be.equal('hello David');
      return expect(application.namespace).to.be["false"];
    });
    return it('should create service derived from other service', function() {
      factory = new DIFactory(dir + '/derivedService.json');
      di = factory.create();
      return expect(di.get('http')).to.be.an["instanceof"](Http);
    });
  });
});



},{"../../../Configuration":1,"../../../src/DI":9,"../../../src/DIFactory":10,"../../data/Http":20}],17:[function(require,module,exports){
var Application, AutowirePath, DI, Helpers, Http, Service, di;

DI = require('../../../src/DI');

Service = require('../../../src/Service');

Helpers = require('../../../src/Helpers');

Application = require('../../data/Application');

Http = require('../../data/Http');

AutowirePath = require('../../data/AutowirePath');

di = null;

describe('Helpers', function() {
  beforeEach(function() {
    return di = new DI;
  });
  describe('#createInstance()', function() {
    return it('should create new instance of object with given arguments', function() {
      var app;
      app = Helpers.createInstance(Application, ['test'], di);
      expect(app).to.be.an["instanceof"](Application);
      return expect(app.array).to.be.equal('test');
    });
  });
  describe('#getArguments()', function() {
    it('should return an empty array', function() {
      return expect(Helpers.getArguments(function() {})).to.be.eql([]);
    });
    return it('should return an array with arguments', function() {
      return expect(Helpers.getArguments(function(first, second, third) {})).to.be.eql(['first', 'second', 'third']);
    });
  });
  return describe('#autowireArguments()', function() {
    it('should return array with services for Application', function() {
      di.addService('array', Array);
      return expect(Helpers.autowireArguments(Application, [], di)).to.be.eql([[]]);
    });
    it('should return array with services for inject method', function() {
      var args;
      di.addService('http', Http);
      args = Helpers.autowireArguments((new Application([])).setHttp, [], di);
      expect(args).to.have.length(1);
      return expect(args[0]).to.be.an["instanceof"](Http);
    });
    it('should return array with services for Application with custom ones', function() {
      var app;
      di.addService('info', ['hello']).setInstantiate(false);
      app = new Application([]);
      return expect(Helpers.autowireArguments(app.prepare, ['simq'], di)).to.be.eql(['simq', ['hello']]);
    });
    it('should throw an error if service to autowire does not exists', function() {
      return expect(function() {
        return Helpers.autowireArguments(Application, [], di);
      }).to["throw"](Error, "DI: Service 'array' was not found.");
    });
    it('should return array with services from params if they are not in definition', function() {
      var app;
      app = new Application([]);
      return expect(Helpers.autowireArguments(app.withoutDefinition, ['hello'], di)).to.be.eql(['hello']);
    });
    it('should inject another service by at char', function() {
      var fn;
      fn = function(variable) {
        return variable;
      };
      di.addService('array', Array);
      return expect(Helpers.autowireArguments(fn, ['@array'], di)).to.be.eql([[]]);
    });
    it.skip('should inject service by full path', function() {
      var fn;
      fn = function(something) {
        return {
          '@di:inject': ['$/test/data/AutowirePath']
        };
      };
      di.addService('someRandomName', '/test/data/AutowirePath');
      return expect(Helpers.autowireArguments(fn, null, di)[0]).to.be.an["instanceof"](AutowirePath);
    });
    it.skip('should inject factory to service with hint and full path', function() {
      var args, fn;
      fn = function(arg) {
        return {
          '@di:inject': ['factory:$/test/data/AutowirePath']
        };
      };
      di.addService('greatService', '/test/data/AutowirePath');
      args = Helpers.autowireArguments(fn, null, di);
      expect(args[0]).to.be.a('function');
      return expect(args[0]()).to.be.an["instanceof"](AutowirePath);
    });
    it.skip('should inject factory to service with hint and just name', function() {
      var args, fn;
      fn = function(arg) {
        return {
          '@di:inject': ['factory:@greatService']
        };
      };
      di.addService('greatService', '/test/data/AutowirePath');
      args = Helpers.autowireArguments(fn, null, di);
      expect(args[0]).to.be.a('function');
      return expect(args[0]()).to.be.an["instanceof"](AutowirePath);
    });
    it('should inject services replaced with dots in the end of hints', function() {
      var fn;
      fn = function(first, second, third) {
        ({
          '@di:inject': ['test', '...']
        });
        return arguments;
      };
      di.addService('second', ['second item']).instantiate = false;
      di.addService('third', ['third item']).instantiate = false;
      return expect(Helpers.autowireArguments(fn, [], di)).to.be.eql(['test', ['second item'], ['third item']]);
    });
    it('should inject services replaced with dots in the beginning of hints', function() {
      var fn;
      fn = function(first, second, third) {
        ({
          '@di:inject': ['...', 'test']
        });
        return arguments;
      };
      di.addService('first', ['first item']).instantiate = false;
      di.addService('second', ['second item']).instantiate = false;
      return expect(Helpers.autowireArguments(fn, [], di)).to.be.eql([['first item'], ['second item'], 'test']);
    });
    it('should inject services replaced with dots in the end', function() {
      var fn;
      fn = function(first, second, third) {
        return arguments;
      };
      di.addService('second', ['second item']).instantiate = false;
      di.addService('third', ['third item']).instantiate = false;
      return expect(Helpers.autowireArguments(fn, ['test', '...'], di)).to.be.eql(['test', ['second item'], ['third item']]);
    });
    return it('should inject services replaced with dots in the beginning', function() {
      var fn;
      fn = function(first, second, third) {
        return arguments;
      };
      di.addService('first', ['first item']).instantiate = false;
      di.addService('second', ['second item']).instantiate = false;
      return expect(Helpers.autowireArguments(fn, ['...', 'test'], di)).to.be.eql([['first item'], ['second item'], 'test']);
    });
  });
});



},{"../../../src/DI":9,"../../../src/Helpers":12,"../../../src/Service":13,"../../data/Application":18,"../../data/AutowirePath":19,"../../data/Http":20}],18:[function(require,module,exports){
(function() {
  var Application;

  Application = (function() {
    Application.prototype.array = null;

    Application.prototype.http = null;

    Application.prototype.namespace = null;

    Application.prototype.info = null;

    Application.prototype.data = null;

    Application.prototype.di = null;

    Application.prototype.diFactory = null;

    Application.prototype.other = null;

    function Application(array) {
      this.array = array;
    }

    Application.prototype.setHttp = function(http) {
      this.http = http;
    };

    Application.prototype.prepare = function(namespace, info) {
      this.namespace = namespace;
      this.info = info;
      return this.namespace;
    };

    Application.prototype.setData = function(noArray) {
      if (noArray == null) {
        noArray = null;
      }
      return this.data = noArray;
    };

    Application.prototype.setDi = function(di) {
      this.di = di;
    };

    Application.prototype.setDiFactory = function(diFactory) {
      this.diFactory = diFactory;
    };

    Application.prototype.withoutDefinition = function(param) {
      return this.other = arguments;
    };

    return Application;

  })();

  module.exports = Application;

}).call(this);

},{}],19:[function(require,module,exports){
(function() {
  var AutowirePath;

  AutowirePath = (function() {
    function AutowirePath() {}

    AutowirePath.prototype.greeting = 'hello';

    return AutowirePath;

  })();

  module.exports = AutowirePath;

}).call(this);

},{}],20:[function(require,module,exports){
(function() {
  var Http;

  Http = (function() {
    function Http() {}

    Http.prototype.async = false;

    Http.prototype.greetings = function(name) {
      return 'hello ' + name;
    };

    return Http;

  })();

  module.exports = Http;

}).call(this);

},{}]},{},[14])