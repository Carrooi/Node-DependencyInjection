/** Generated by SimQ **/
/** modules **/

// Generated by CoffeeScript 1.6.3
(function() {
  var SUPPORTED, arrayIndexOf, cache, creating, modules, require, resolve, stats;

  if (!this.require) {
    SUPPORTED = ['js', 'json', 'ts', 'coffee', 'eco'];
    modules = {};
    stats = {};
    cache = {};
    creating = [];
    require = function(name, parent) {
      var fullName, m;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof cache[fullName] === 'undefined') {
        m = {
          exports: {},
          id: fullName,
          filename: fullName,
          loaded: false,
          parent: null,
          children: null
        };
        if (arrayIndexOf(creating, fullName) === -1) {
          creating.push(fullName);
          modules[fullName].apply(window, [m.exports, m]);
          creating.splice(arrayIndexOf(creating, fullName));
          cache[fullName] = m;
        }
        m.loaded = true;
      } else {
        m = cache[fullName];
      }
      if (typeof stats[fullName] === 'undefined') {
        stats[fullName] = {
          atime: null,
          mtime: null,
          ctime: null
        };
      }
      stats[fullName].atime = new Date;
      return m.exports;
    };
    resolve = function(name, parent) {
      var ext, num, part, parts, prev, result, _i, _j, _k, _len, _len1, _len2;
      if (parent == null) {
        parent = null;
      }
      if (parent !== null && name[0] === '.') {
        num = parent.lastIndexOf('/');
        if (num !== -1) {
          parent = parent.substr(0, num);
        }
        name = parent + '/' + name;
        parts = name.split('/');
        result = [];
        prev = null;
        for (_i = 0, _len = parts.length; _i < _len; _i++) {
          part = parts[_i];
          if (part === '.' || part === '') {
            continue;
          } else if (part === '..' && prev) {
            result.pop();
          } else {
            result.push(part);
          }
          prev = part;
        }
        name = result.join('/');
        if (parent[0] === '/') {
          name = '/' + name;
        }
      }
      if (typeof modules[name] !== 'undefined') {
        return name;
      }
      for (_j = 0, _len1 = SUPPORTED.length; _j < _len1; _j++) {
        ext = SUPPORTED[_j];
        if (typeof modules[name + '.' + ext] !== 'undefined') {
          return name + '.' + ext;
        }
      }
      for (_k = 0, _len2 = SUPPORTED.length; _k < _len2; _k++) {
        ext = SUPPORTED[_k];
        if (typeof modules[name + '/index.' + ext] !== 'undefined') {
          return name + '/index.' + ext;
        }
      }
      return null;
    };
    arrayIndexOf = function(array, search) {
      var element, i, _i, _len;
      if (typeof Array.prototype.indexOf !== 'undefined') {
        return array.indexOf(search);
      }
      if (array.length === 0) {
        return -1;
      }
      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
        element = array[i];
        if (element === search) {
          return i;
        }
      }
      return -1;
    };
    this.require = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return require(name, parent);
    };
    this.require.simq = true;
    this.require.version = 1;
    this.require.resolve = function(name, parent) {
      if (parent == null) {
        parent = null;
      }
      return resolve(name, parent);
    };
    this.require.define = function(bundleOrName, obj) {
      var m, name, _results;
      if (obj == null) {
        obj = null;
      }
      if (typeof bundleOrName === 'string') {
        return modules[bundleOrName] = obj;
      } else {
        _results = [];
        for (name in bundleOrName) {
          m = bundleOrName[name];
          _results.push(modules[name] = m);
        }
        return _results;
      }
    };
    this.require.release = function() {
      var name, _results;
      _results = [];
      for (name in cache) {
        _results.push(delete cache[name]);
      }
      return _results;
    };
    this.require.getStats = function(name, parent) {
      var fullName;
      if (parent == null) {
        parent = null;
      }
      fullName = resolve(name, parent);
      if (fullName === null) {
        throw new Error('Module ' + name + ' was not found.');
      }
      if (typeof stats[fullName] === 'undefined') {
        stats[fullName] = {
          atime: null,
          mtime: null,
          ctime: null
        };
      }
      return stats[fullName];
    };
    this.require.__setStats = function(bundle) {
      var data, name, _results;
      _results = [];
      for (name in bundle) {
        data = bundle[name];
        _results.push(stats[name] = {
          atime: new Date(data.atime),
          mtime: new Date(data.mtime),
          ctime: new Date(data.ctime)
        });
      }
      return _results;
    };
    this.require.cache = cache;
  }

  return this.require.define;

}).call(this)({
 '/lib/Service.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/Service.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/Service.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/Service.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/Service.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Helpers, Service;
	
	  Helpers = require('./Helpers');
	
	  Service = (function() {
	    Service.prototype.di = null;
	
	    Service.prototype.name = null;
	
	    Service.prototype.service = null;
	
	    Service.prototype["arguments"] = null;
	
	    Service.prototype.instantiate = true;
	
	    Service.prototype.autowired = true;
	
	    Service.prototype.setup = null;
	
	    Service.prototype.instance = null;
	
	    function Service(di, name, service, _arguments) {
	      this.di = di;
	      this.name = name;
	      this.service = service;
	      this["arguments"] = _arguments != null ? _arguments : [];
	      this.setup = {};
	    }
	
	    Service.prototype.getInstance = function() {
	      if (this.instance === null) {
	        this.instance = this.create();
	      }
	      return this.instance;
	    };
	
	    Service.prototype.create = function() {
	      var args, e, method, names, s, service, _ref;
	      if (Helpers.arrayIndexOf(this.di.creating, this.name) !== -1) {
	        s = this.di.creating.length === 1 ? '' : 's';
	        names = this.di.creating.join(', ');
	        throw new Error("Circular reference detected for service" + s + ": " + names + ".");
	      }
	      this.di.creating.push(this.name);
	      service = this.service;
	      if (Object.prototype.toString.call(service) === '[object String]') {
	        service = require(service);
	      }
	      try {
	        service = this.di.createInstance(service, this["arguments"], this.instantiate);
	        _ref = this.setup;
	        for (method in _ref) {
	          args = _ref[method];
	          if (this.setup.hasOwnProperty(method)) {
	            if (typeof service[method] === 'function') {
	              service[method].apply(service, Helpers.autowireArguments(service[method], args, this.di));
	            } else {
	              service[method] = args;
	            }
	          }
	        }
	      } catch (_error) {
	        e = _error;
	        this.di.creating.splice(Helpers.arrayIndexOf(this.di.creating, this.name), 1);
	        throw e;
	      }
	      this.di.creating.splice(Helpers.arrayIndexOf(this.di.creating, this.name), 1);
	      return service;
	    };
	
	    Service.prototype.addSetup = function(method, args) {
	      if (args == null) {
	        args = [];
	      }
	      this.setup[method] = args;
	      return this;
	    };
	
	    Service.prototype.setInstantiate = function(instantiate) {
	      this.instantiate = instantiate;
	      return this;
	    };
	
	    Service.prototype.setAutowired = function(autowired) {
	      this.autowired = autowired;
	      return this;
	    };
	
	    return Service;
	
	  })();
	
	  module.exports = Service;
	
	}).call(this);
	

}, '/lib/Helpers.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/Helpers.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/Helpers.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/Helpers.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/Helpers.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Helpers;
	
	  Helpers = (function() {
	    function Helpers() {}
	
	    Helpers.clone = function(obj) {
	      var key, result, value, _i, _len, _ref, _ref1, _type;
	      _type = Object.prototype.toString;
	      switch (_type.call(obj)) {
	        case '[object Array]':
	          result = [];
	          for (key = _i = 0, _len = obj.length; _i < _len; key = ++_i) {
	            value = obj[key];
	            if ((_ref = _type.call(value)) === '[object Array]' || _ref === '[object Object]') {
	              result[key] = Helpers.clone(value);
	            } else {
	              result[key] = value;
	            }
	          }
	          break;
	        case '[object Object]':
	          result = {};
	          for (key in obj) {
	            value = obj[key];
	            if ((_ref1 = _type.call(value)) === '[object Array]' || _ref1 === '[object Object]') {
	              result[key] = Helpers.clone(value);
	            } else {
	              result[key] = value;
	            }
	          }
	          break;
	        default:
	          return obj;
	      }
	      return result;
	    };
	
	    Helpers.log = function(message) {
	      if ((typeof console !== "undefined" && console !== null ? console.log : void 0) != null) {
	        return console.log(message);
	      }
	    };
	
	    Helpers.arrayIndexOf = function(array, search) {
	      var element, i, _i, _len;
	      if (typeof Array.prototype.indexOf !== 'undefined') {
	        return array.indexOf(search);
	      }
	      if (array.length === 0) {
	        return -1;
	      }
	      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
	        element = array[i];
	        if (element === search) {
	          return i;
	        }
	      }
	      return -1;
	    };
	
	    Helpers.createInstance = function(service, args, container) {
	      var wrapper;
	      if (args == null) {
	        args = [];
	      }
	      wrapper = function(obj, args) {
	        var f;
	        if (args == null) {
	          args = [];
	        }
	        f = function() {
	          return obj.apply(this, args);
	        };
	        f.prototype = obj.prototype;
	        return f;
	      };
	      return new (wrapper(service, Helpers.autowireArguments(service, args, container)));
	    };
	
	    Helpers.getArguments = function(method) {
	      var args, e;
	      try {
	        method = method.toString();
	      } catch (_error) {
	        e = _error;
	        throw new Error('Can not call toString on method');
	      }
	      args = method.slice(method.indexOf('(') + 1, method.indexOf(')')).match(/([^\s,]+)/g);
	      args = args === null ? [] : args;
	      return args;
	    };
	
	    Helpers.getHintArguments = function(method) {
	      var arg, args, body, e, i, _i, _len;
	      try {
	        method = method.toString();
	      } catch (_error) {
	        e = _error;
	        throw new Error('Can not call toString on method');
	      }
	      body = method.slice(method.indexOf("{") + 1, method.lastIndexOf("}"));
	      args = body.match(/{\s*['"]@di:inject['"]\s*:\s*\[(.+)\]\s*}/);
	      if (args !== null) {
	        args = args[1].split(',');
	        for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
	          arg = args[i];
	          args[i] = arg.replace(/^\s*['"]/, '').replace(/['"]$/, '');
	        }
	        return args;
	      }
	      return null;
	    };
	
	    Helpers.autowireArguments = function(method, args, container) {
	      var dots, factory, hints, i, parameter, previousDots, result, service, _i, _len, _ref;
	      if (args == null) {
	        args = [];
	      }
	      result = [];
	      factory = false;
	      dots = false;
	      previousDots = false;
	      hints = Helpers.getHintArguments(method);
	      if (hints !== null) {
	        args = hints;
	      }
	      args = Helpers.clone(args);
	      _ref = Helpers.getArguments(method);
	      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
	        parameter = _ref[i];
	        if (typeof args[0] !== 'undefined' && args[0] === '...') {
	          dots = true;
	        }
	        if (typeof args[0] === 'undefined' || dots || (container.hasDefinition(parameter) && previousDots)) {
	          if (parameter.match(/Factory$/) !== null) {
	            parameter = parameter.substring(0, parameter.length - 7);
	            factory = true;
	          }
	          service = container.findDefinitionByName(parameter);
	          if (service.autowired === false) {
	            throw new Error("DI: Service '" + parameter + "' in not autowired.");
	          }
	          if (factory === true) {
	            result.push(container.getFactory(parameter));
	          } else {
	            result.push(container.get(parameter));
	          }
	          if (dots) {
	            args.shift();
	          }
	          previousDots = true;
	        } else {
	          if (args[0] !== null && typeof args[0] === 'string' && args[0].match(/^factory:/) !== null) {
	            args[0] = args[0].substr(8);
	            factory = true;
	          }
	          if (args[0] !== null && typeof args[0] === 'string' && args[0].match(/^@/) !== null) {
	            args[0] = args[0].substr(1);
	            if (factory) {
	              result.push(container.getFactory(args[0]));
	            } else {
	              result.push(container.get(args[0]));
	            }
	          } else if (args[0] !== null && typeof args[0] === 'string' && args[0].match(/^\$/) !== null) {
	            args[0] = args[0].substr(1);
	            if (factory) {
	              result.push(container.getFactoryByPath(args[0]));
	            } else {
	              result.push(container.getByPath(args[0]));
	            }
	          } else {
	            result.push(args[0]);
	          }
	          previousDots = false;
	          args.shift();
	        }
	        factory = false;
	        dots = false;
	      }
	      return result;
	    };
	
	    return Helpers;
	
	  })();
	
	  module.exports = Helpers;
	
	}).call(this);
	

}, '/lib/Defaults.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/Defaults.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/Defaults.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/Defaults.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/Defaults.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Defaults, isWindow;
	
	  isWindow = typeof window !== 'undefined';
	
	  Defaults = (function() {
	    function Defaults(di) {
	      di.addService('di', di).setInstantiate(false);
	      di.addService('timer', this.getTimer()).setInstantiate(false);
	      if (isWindow) {
	        di.addService('window', window).setInstantiate(false);
	        di.addService('document', window.document).setInstantiate(false);
	      } else {
	        di.addService('global', global).setInstantiate(false);
	      }
	    }
	
	    Defaults.prototype.getTimer = function() {
	      var main;
	      main = isWindow ? window : global;
	      return {
	        setTimeout: function(callback, delay) {
	          return main.setTimeout.apply(main, arguments);
	        },
	        setInterval: function(callback, delay) {
	          return main.setInterval.apply(main, arguments);
	        },
	        clearTimeout: function(timeoutID) {
	          return main.clearTimeout.call(main, timeoutID);
	        },
	        clearInterval: function(intervalID) {
	          return main.clearInterval.call(main, intervalID);
	        }
	      };
	    };
	
	    return Defaults;
	
	  })();
	
	  module.exports = Defaults;
	
	}).call(this);
	

}, '/lib/DI.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/DI.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/DI.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/DI.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/DI.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var DI, Defaults, Helpers, Service,
	    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };
	
	  Service = require('./Service');
	
	  Helpers = require('./Helpers');
	
	  Defaults = require('./Defaults');
	
	  DI = (function() {
	    DI.prototype.services = null;
	
	    DI.prototype.parameters = null;
	
	    DI.prototype.config = null;
	
	    DI.prototype.paths = null;
	
	    DI.prototype.reserved = ['di'];
	
	    DI.prototype.creating = null;
	
	    DI.prototype.basePath = null;
	
	    function DI() {
	      this.services = {};
	      this.paths = {};
	      this.creating = [];
	      new Defaults(this);
	    }
	
	    DI.prototype.getParameter = function(parameter) {
	      if (this.config === null) {
	        throw new Error('DI container was not created with DIConfigurator.');
	      }
	      return this.config.getParameter(parameter);
	    };
	
	    DI.prototype.getPath = function(name) {
	      return (this.basePath === null ? '' : this.basePath + '/') + name;
	    };
	
	    DI.prototype.addService = function(name, service, args) {
	      if (args == null) {
	        args = [];
	      }
	      if (__indexOf.call(this.reserved, name) >= 0 && typeof this.services[name] !== 'undefined') {
	        throw new Error("DI: name '" + name + "' is reserved by DI.");
	      }
	      if (typeof service === 'string') {
	        service = require.resolve(this.getPath(service));
	        this.paths[service] = name;
	      }
	      this.services[name] = new Service(this, name, service, args);
	      return this.services[name];
	    };
	
	    DI.prototype.autowireArguments = function(method, args) {
	      if (args == null) {
	        args = [];
	      }
	      Helpers.log('Method autowireArguments is deprecated, use the same method in Helpers class.');
	      return Helpers.autowireArguments(method, args, this);
	    };
	
	    DI.prototype.createInstance = function(service, args, instantiate) {
	      if (args == null) {
	        args = [];
	      }
	      if (instantiate == null) {
	        instantiate = true;
	      }
	      if (instantiate === true) {
	        if (Object.prototype.toString.call(service.prototype.constructor) === '[Function]') {
	          service = this.inject(service, args, {});
	        } else {
	          service = Helpers.createInstance(service, args, this);
	        }
	      }
	      return service;
	    };
	
	    DI.prototype.inject = function(fn, args, scope) {
	      if (args == null) {
	        args = [];
	      }
	      if (scope == null) {
	        scope = {};
	      }
	      if (!(fn instanceof Function)) {
	        throw new Error('DI: Inject method can be called only on functions.');
	      }
	      args = Helpers.autowireArguments(fn, args, this);
	      return fn.apply(scope, args);
	    };
	
	    DI.prototype.hasDefinition = function(name) {
	      return typeof this.services[name] !== 'undefined';
	    };
	
	    DI.prototype.findDefinitionByName = function(name, need) {
	      if (need == null) {
	        need = true;
	      }
	      if (!this.hasDefinition(name)) {
	        if (need === true) {
	          throw new Error("DI: Service '" + name + "' was not found.");
	        } else {
	          return null;
	        }
	      }
	      return this.services[name];
	    };
	
	    DI.prototype.getByName = function(name) {
	      Helpers.log('DI: Method getByName is deprecated, use get method.');
	      return this.get(name);
	    };
	
	    DI.prototype.getByPath = function(path) {
	      var e, error;
	      error = false;
	      try {
	        path = require.resolve(this.getPath(path));
	      } catch (_error) {
	        e = _error;
	        error = true;
	      }
	      if (typeof this.paths[path] !== 'undefined' && !error) {
	        return this.get(this.paths[path]);
	      }
	      return null;
	    };
	
	    DI.prototype.getFactoryByPath = function(path) {
	      var e, error;
	      error = false;
	      try {
	        path = require.resolve(this.getPath(path));
	      } catch (_error) {
	        e = _error;
	        error = true;
	      }
	      if (typeof this.paths[path] !== 'undefined' && !error) {
	        return this.getFactory(this.paths[path]);
	      }
	      return null;
	    };
	
	    DI.prototype.get = function(name) {
	      return this.findDefinitionByName(name).getInstance();
	    };
	
	    DI.prototype.create = function(name) {
	      return this.findDefinitionByName(name).create();
	    };
	
	    DI.prototype.getFactory = function(name) {
	      var _this = this;
	      return function() {
	        return _this.findDefinitionByName(name).create();
	      };
	    };
	
	    return DI;
	
	  })();
	
	  module.exports = DI;
	
	}).call(this);
	

}, 'easy-configuration/lib/EasyConfiguration.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'easy-configuration/lib/EasyConfiguration.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'easy-configuration/lib/EasyConfiguration.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'easy-configuration/lib/EasyConfiguration.js';
	var __dirname = 'easy-configuration/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'easy-configuration/lib/EasyConfiguration.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var EasyConfiguration, Extension, Helpers, callsite, isWindow, merge, path;
	
	  merge = require('recursive-merge');
	
	  Extension = require('./Extension');
	
	  Helpers = require('./Helpers');
	
	  isWindow = typeof window !== 'undefined';
	
	  if (!isWindow) {
	    callsite = require('callsite');
	    path = require('path');
	  }
	
	  EasyConfiguration = (function() {
	    EasyConfiguration.PARAMETER_REGEXP = /%([a-zA-Z.-_]+)%/g;
	
	    EasyConfiguration.prototype.files = null;
	
	    EasyConfiguration.prototype.reserved = null;
	
	    EasyConfiguration.prototype.extensions = null;
	
	    EasyConfiguration.prototype.includes = null;
	
	    EasyConfiguration.prototype._parameters = null;
	
	    EasyConfiguration.prototype.parameters = null;
	
	    EasyConfiguration.prototype.data = null;
	
	    function EasyConfiguration(_path, section) {
	      if (_path == null) {
	        _path = null;
	      }
	      if (section == null) {
	        section = 'production';
	      }
	      this.files = {};
	      this.reserved = ['includes', 'parameters', 'common'];
	      this.extensions = {};
	      this.includes = {};
	      this._parameters = {};
	      this.parameters = {};
	      if (_path !== null) {
	        this.addConfig(_path, section);
	      }
	    }
	
	    EasyConfiguration.prototype.addConfig = function(_path, section) {
	      var previous, stack;
	      if (section == null) {
	        section = 'production';
	      }
	      if (_path[0] === '.' && isWindow) {
	        throw new Error('Relative paths to config files are not supported in browser.');
	      }
	      if (_path[0] === '.') {
	        stack = callsite();
	        previous = stack[1].getFileName() === __filename ? stack[2] : stack[1];
	        _path = path.join(path.dirname(previous.getFileName()), _path);
	      }
	      if (Helpers.arrayIndexOf(this.reserved, section) === -1) {
	        this.reserved.push(section);
	      }
	      return this.files[_path] = section;
	    };
	
	    EasyConfiguration.prototype.addSection = function(name) {
	      return this.addExtension(name, new Extension);
	    };
	
	    EasyConfiguration.prototype.addExtension = function(name, extension) {
	      if (Helpers.arrayIndexOf(this.reserved, name) !== -1) {
	        throw new Error('Extension\'s name ' + name + ' is reserved.');
	      }
	      extension.configurator = this;
	      this.extensions[name] = extension;
	      return this.extensions[name];
	    };
	
	    EasyConfiguration.prototype.removeExtension = function(name) {
	      if (typeof this.extensions[name] === 'undefined') {
	        throw new Error('Extension with name ' + name + ' was not found.');
	      }
	      delete this.extensions[name];
	      this.invalidate();
	      return this;
	    };
	
	    EasyConfiguration.prototype.invalidate = function() {
	      this.data = null;
	      return this;
	    };
	
	    EasyConfiguration.prototype.load = function() {
	      var config, data, section, _path, _ref;
	      if (this.data === null) {
	        config = {};
	        _ref = this.files;
	        for (_path in _ref) {
	          section = _ref[_path];
	          config = this.merge(this.loadConfig(_path, section), config);
	        }
	        data = this.parse(config);
	        this.includes = data.files;
	        this.parameters = data.parameters;
	        this.data = data.sections;
	      }
	      return this.data;
	    };
	
	    EasyConfiguration.prototype.loadConfig = function(file, section) {
	      var data, include, _data, _i, _len, _path, _ref;
	      if (section == null) {
	        section = 'production';
	      }
	      data = require(file);
	      data = Helpers.clone(data, false);
	      if (typeof data[section] !== 'undefined' || typeof data.common !== 'undefined') {
	        if (typeof data.common !== 'undefined') {
	          _data = data.common;
	          if (typeof data[section] !== 'undefined') {
	            _data = this.merge(data[section], _data);
	          }
	        } else {
	          _data = data[section];
	        }
	        data = _data;
	      }
	      if (typeof data.includes !== 'undefined') {
	        _ref = data.includes;
	        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
	          include = _ref[_i];
	          _path = Helpers.normalizePath(Helpers.dirName(file) + '/' + include);
	          data = this.merge(data, this.loadConfig(_path));
	        }
	      }
	      return data;
	    };
	
	    EasyConfiguration.prototype.parse = function(data) {
	      var name, result, section, sections, _ref;
	      result = {
	        files: [],
	        parameters: {},
	        sections: {}
	      };
	      if (typeof data.includes !== 'undefined') {
	        result.files = data.includes;
	      }
	      if (typeof data.parameters !== 'undefined') {
	        this._parameters = data.parameters;
	        result.parameters = this.expandParameters(data.parameters);
	      }
	      _ref = this.extensions;
	      for (name in _ref) {
	        section = _ref[name];
	        if (typeof data[name] === 'undefined') {
	          data[name] = {};
	        }
	      }
	      sections = data;
	      if (typeof sections.parameters !== 'undefined') {
	        delete sections.parameters;
	      }
	      if (typeof sections.includes !== 'undefined') {
	        delete sections.includes;
	      }
	      for (name in sections) {
	        section = sections[name];
	        if (sections.hasOwnProperty(name) && (name !== '__proto__')) {
	          if (typeof this.extensions[name] === 'undefined') {
	            throw new Error('Found section ' + name + ' but there is no coresponding extension.');
	          }
	          this.extensions[name].data = section;
	          section = this.extensions[name].loadConfiguration();
	          section = this.expandParameters(section);
	          section = this.extensions[name].afterCompile(section);
	          result.sections[name] = section;
	        }
	      }
	      return result;
	    };
	
	    EasyConfiguration.prototype.expandParameters = function(parameters) {
	      var name, param, parse, type, _i, _len, _type,
	        _this = this;
	      _type = Object.prototype.toString;
	      parse = function(name, param) {
	        switch (_type.call(param)) {
	          case '[object String]':
	            return parameters[name] = param.replace(EasyConfiguration.PARAMETER_REGEXP, function(match, variable) {
	              return _this._getParameter(variable, [name]);
	            });
	          case '[object Object]':
	          case '[object Array]':
	            return parameters[name] = _this.expandParameters(param);
	          default:
	            return parameters[name] = param;
	        }
	      };
	      type = _type.call(parameters);
	      switch (type) {
	        case '[object Object]':
	          for (name in parameters) {
	            param = parameters[name];
	            parse(name, param);
	          }
	          break;
	        case '[object Array]':
	          for (name = _i = 0, _len = parameters.length; _i < _len; name = ++_i) {
	            param = parameters[name];
	            parse(name, param);
	          }
	          break;
	        default:
	          throw new Error("Can not parse " + type + " parameters.");
	      }
	      return parameters;
	    };
	
	    EasyConfiguration.prototype._getParameter = function(parameter, previous) {
	      var actual, part, parts, s, _i, _len,
	        _this = this;
	      if (previous == null) {
	        previous = [];
	      }
	      parts = parameter.split('.');
	      actual = this._parameters;
	      for (_i = 0, _len = parts.length; _i < _len; _i++) {
	        part = parts[_i];
	        if (typeof actual[part] === 'undefined') {
	          throw new Error("Parameter " + parameter + " is not defined.");
	        }
	        actual = actual[part];
	      }
	      if (Helpers.arrayIndexOf(previous, parameter) !== -1) {
	        s = previous.length === 1 ? '' : 's';
	        previous = previous.join(', ');
	        throw new Error("Found circular reference in parameter" + s + " " + previous + ".");
	      }
	      previous.push(parameter);
	      actual = actual.replace(EasyConfiguration.PARAMETER_REGEXP, function(match, param) {
	        return _this._getParameter(param, previous);
	      });
	      return actual;
	    };
	
	    EasyConfiguration.prototype.getParameter = function(parameter) {
	      return this._getParameter(parameter);
	    };
	
	    EasyConfiguration.prototype.merge = function(left, right) {
	      right = Helpers.clone(right, false);
	      return merge(left, right);
	    };
	
	    return EasyConfiguration;
	
	  })();
	
	  module.exports = EasyConfiguration;
	
	}).call(this);
	

}, 'recursive-merge/lib/Merge.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'recursive-merge/lib/Merge.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'recursive-merge/lib/Merge.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'recursive-merge/lib/Merge.js';
	var __dirname = 'recursive-merge/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'recursive-merge/lib/Merge.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var isArray, isObject, isScalar, merge, mergeArray, mergeObject, _type,
	    __slice = [].slice;
	
	  _type = Object.prototype.toString;
	
	  isScalar = function(variable) {
	    var _ref;
	    return ((_ref = _type.call(variable)) !== '[object Array]' && _ref !== '[object Object]') || variable === null;
	  };
	
	  isObject = function(variable) {
	    return variable !== null && _type.call(variable) === '[object Object]';
	  };
	
	  isArray = function(variable) {
	    return _type.call(variable) === '[object Array]';
	  };
	
	  merge = function(left, right) {
	    var leftType, rightType;
	    if (isScalar(left) || isScalar(right)) {
	      throw new Error('Can not merge scalar objects.');
	    }
	    leftType = _type.call(left);
	    rightType = _type.call(right);
	    if (leftType !== rightType) {
	      throw new Error('Can not merge ' + leftType + ' with ' + rightType + '.');
	    }
	    switch (leftType) {
	      case '[object Array]':
	        return mergeArray(left, right);
	      case '[object Object]':
	        return mergeObject(left, right);
	      default:
	        throw new Error('Can not merge ' + leftType + ' objects.');
	    }
	  };
	
	  mergeArray = function(left, right) {
	    var add, i, leftValue, rightValue, value, _i, _j, _len, _len1;
	    add = [];
	    for (i = _i = 0, _len = right.length; _i < _len; i = ++_i) {
	      rightValue = right[i];
	      leftValue = left[i];
	      if ((isObject(leftValue) && isObject(rightValue)) || (isArray(leftValue) && isArray(rightValue))) {
	        left[i] = merge(leftValue, rightValue);
	      } else if (isObject(rightValue)) {
	        add.push(merge({}, rightValue));
	      } else if (isArray(rightValue)) {
	        add.push(merge([], rightValue));
	      } else {
	        add.push(rightValue);
	      }
	    }
	    for (_j = 0, _len1 = add.length; _j < _len1; _j++) {
	      value = add[_j];
	      left.push(value);
	    }
	    return left;
	  };
	
	  mergeObject = function(left, right) {
	    var key, mergeWith, value;
	    for (key in right) {
	      value = right[key];
	      if (right.hasOwnProperty(key) && (key !== '__proto__')) {
	        if (isScalar(value)) {
	          if (!left.hasOwnProperty(key)) {
	            left[key] = value;
	          }
	        } else {
	          if (left.hasOwnProperty(key)) {
	            left[key] = merge(left[key], value);
	          } else {
	            mergeWith = isObject(value) ? {} : [];
	            left[key] = merge(mergeWith, value);
	          }
	        }
	      }
	    }
	    return left;
	  };
	
	  module.exports = function() {
	    var left, r, right, _i, _len;
	    left = arguments[0], right = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
	    for (_i = 0, _len = right.length; _i < _len; _i++) {
	      r = right[_i];
	      left = merge(left, r);
	    }
	    return left;
	  };
	
	}).call(this);
	

}, 'easy-configuration/lib/Extension.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'easy-configuration/lib/Extension.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'easy-configuration/lib/Extension.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'easy-configuration/lib/Extension.js';
	var __dirname = 'easy-configuration/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'easy-configuration/lib/Extension.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Extension;
	
	  Extension = (function() {
	    function Extension() {}
	
	    Extension.prototype.configurator = null;
	
	    Extension.prototype.data = null;
	
	    Extension.prototype.getConfig = function(defaults) {
	      if (defaults == null) {
	        defaults = null;
	      }
	      if (this.data === null) {
	        this.configurator.load();
	      }
	      if (defaults !== null) {
	        this.data = this.configurator.merge(this.data, defaults);
	      }
	      return this.data;
	    };
	
	    Extension.prototype.loadConfiguration = function() {
	      return this.getConfig();
	    };
	
	    Extension.prototype.afterCompile = function(data) {
	      return data;
	    };
	
	    return Extension;
	
	  })();
	
	  module.exports = Extension;
	
	}).call(this);
	

}, 'easy-configuration/lib/Helpers.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'easy-configuration/lib/Helpers.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'easy-configuration/lib/Helpers.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'easy-configuration/lib/Helpers.js';
	var __dirname = 'easy-configuration/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', 'easy-configuration/lib/Helpers.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Helpers;
	
	  Helpers = (function() {
	    function Helpers() {}
	
	    Helpers.dirName = function(path) {
	      var num;
	      num = path.lastIndexOf('/');
	      return path.substr(0, num);
	    };
	
	    Helpers.normalizePath = function(path) {
	      var part, parts, prev, result, _i, _len;
	      parts = path.split('/');
	      result = [];
	      prev = null;
	      for (_i = 0, _len = parts.length; _i < _len; _i++) {
	        part = parts[_i];
	        if (part === '.' || part === '') {
	          continue;
	        } else if (part === '..' && prev) {
	          result.pop();
	        } else {
	          result.push(part);
	        }
	        prev = part;
	      }
	      return '/' + result.join('/');
	    };
	
	    Helpers.arrayIndexOf = function(array, search) {
	      var element, i, _i, _len;
	      if (typeof Array.prototype.indexOf !== 'undefined') {
	        return array.indexOf(search);
	      }
	      if (array.length === 0) {
	        return -1;
	      }
	      for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
	        element = array[i];
	        if (element === search) {
	          return i;
	        }
	      }
	      return -1;
	    };
	
	    Helpers.clone = function(obj) {
	      var key, result, value, _i, _len, _ref, _ref1, _type;
	      _type = Object.prototype.toString;
	      switch (_type.call(obj)) {
	        case '[object Array]':
	          result = [];
	          for (key = _i = 0, _len = obj.length; _i < _len; key = ++_i) {
	            value = obj[key];
	            if (value !== null && ((_ref = _type.call(value)) === '[object Array]' || _ref === '[object Object]')) {
	              result[key] = Helpers.clone(value);
	            } else {
	              result[key] = value;
	            }
	          }
	          break;
	        case '[object Object]':
	          result = {};
	          for (key in obj) {
	            value = obj[key];
	            if (value !== null && ((_ref1 = _type.call(value)) === '[object Array]' || _ref1 === '[object Object]')) {
	              result[key] = Helpers.clone(value);
	            } else {
	              result[key] = value;
	            }
	          }
	          break;
	        default:
	          return obj;
	      }
	      return result;
	    };
	
	    return Helpers;
	
	  })();
	
	  module.exports = Helpers;
	
	}).call(this);
	

}, 'callsite/index.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'callsite/index.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'callsite/index.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'callsite/index.js';
	var __dirname = 'callsite';
	var process = {cwd: function() {return '/';}, argv: ['node', 'callsite/index.js'], env: {}};

	/** code **/
	
	module.exports = function(){
	  var orig = Error.prepareStackTrace;
	  Error.prepareStackTrace = function(_, stack){ return stack; };
	  var err = new Error;
	  Error.captureStackTrace(err, arguments.callee);
	  var stack = err.stack;
	  Error.prepareStackTrace = orig;
	  return stack;
	};
	

}, '/test/browser/tests/DI.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/browser/tests/DI.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/browser/tests/DI.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/browser/tests/DI.coffee';
	var __dirname = '/test/browser/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/browser/tests/DI.coffee'], env: {}};

	/** code **/
	(function() {
	  var Application, DI, Http, Service, di, dir;
	
	  DI = require('/lib/DI');
	
	  Service = require('/lib/Service');
	
	  Application = require('/test/data/Application');
	
	  Http = require('/test/data/Http');
	
	  dir = '/test/data';
	
	  di = null;
	
	  describe('DI', function() {
	    beforeEach(function() {
	      return di = new DI;
	    });
	    describe('defaults', function() {
	      it('should be added di into services', function() {
	        return expect(di.get('di')).to.be.equal(di);
	      });
	      it('should be added timer service', function(done) {
	        var timer;
	        timer = di.get('timer');
	        expect(timer).to.have.keys(['setTimeout', 'setInterval', 'clearTimeout', 'clearInterval']);
	        return timer.setTimeout(function() {
	          return done();
	        }, 100);
	      });
	      it('should be added window object service', function() {
	        return expect(di.get('window')).to.be.equal(window);
	      });
	      return it('should be added document object service', function() {
	        return expect(di.get('document')).to.be.equal(window.document);
	      });
	    });
	    describe('#addService()', function() {
	      it('should return instance of new Service class from object', function() {
	        return expect(di.addService('array', Array)).to.be.an["instanceof"](Service);
	      });
	      it('should return instance of new Service class from path', function() {
	        return expect(di.addService('app', "" + dir + "/Application")).to.be.an["instanceof"](Service);
	      });
	      it('should throw an error if you try to register service with reserved name', function() {
	        return expect(function() {
	          return di.addService('di', DI);
	        }).to["throw"](Error, "DI: name 'di' is reserved by DI.");
	      });
	      return it('should create service with null as arguments', function() {
	        di.addService('http', "" + dir + "/Http");
	        di.addService('app', "" + dir + "/Application", [null]);
	        return expect(di.get('app').array).to.not.exists;
	      });
	    });
	    describe('#createInstance()', function() {
	      beforeEach(function() {
	        di.addService('array', Array);
	        return di.addService('http', Http);
	      });
	      it('should return new instance of Application with all dependencies', function() {
	        var app;
	        app = di.createInstance(Application);
	        expect(app).to.be.an["instanceof"](Application);
	        expect(app.array).to.be.an["instanceof"](Array);
	        return expect(app.http).to.not.exists;
	      });
	      return it('should throw an error when service to inject does not exists', function() {
	        var app;
	        delete di.services.http;
	        app = di.createInstance(Application);
	        return expect(function() {
	          return di.inject(app.setHttp, [], app);
	        }).to["throw"](Error, "DI: Service 'http' was not found.");
	      });
	    });
	    describe('#findDefinitionByName()', function() {
	      it('should return definition of Array service', function() {
	        di.addService('array', Array);
	        return expect(di.findDefinitionByName('array')).to.be.an["instanceof"](Service);
	      });
	      return it('should throw an error if service is not registered', function() {
	        return expect(function() {
	          return di.findDefinitionByName('array');
	        }).to["throw"](Error, "DI: Service 'array' was not found.");
	      });
	    });
	    return describe('Loaders', function() {
	      beforeEach(function() {
	        di.addService('array', Array);
	        di.addService('http', Http);
	        di.addService('info', ['hello']).setInstantiate(false);
	        di.addService('noArray', ['not this one']).setInstantiate(false).setAutowired(false);
	        return di.addService('application', Application).addSetup('prepare', ['simq', '...']);
	      });
	      describe('#get()', function() {
	        it('should return instance of Application with all dependencies', function() {
	          var app;
	          app = di.get('application');
	          expect(app).to.be.an["instanceof"](Application);
	          expect(app.namespace).to.be.equal('simq');
	          expect(app.array).to.be.eql([]);
	          return expect(app.http).to.not.exists;
	        });
	        it('should return always the same instance of Application', function() {
	          return expect(di.get('application')).to.be.equal(di.get('application'));
	        });
	        it('should return info array without instantiating it', function() {
	          return expect(di.get('info')).to.be.eql(['hello']);
	        });
	        it('should not set services which are not autowired', function() {
	          di.findDefinitionByName('application').addSetup('setData');
	          return expect(function() {
	            return di.get('application');
	          }).to["throw"](Error, "DI: Service 'noArray' in not autowired.");
	        });
	        it('should autowire di container into Application instance', function() {
	          di.findDefinitionByName('application').addSetup('setDi');
	          return expect(di.get('application').di).to.be.equal(di);
	        });
	        it('should autowire di container factory into Application instance', function() {
	          var factory;
	          di.findDefinitionByName('application').addSetup('setDiFactory');
	          factory = di.get('application').diFactory;
	          expect(factory).to.be.an["instanceof"](Function);
	          return expect(factory()).to.be.equal(di);
	        });
	        it('should set info property directly', function() {
	          di.findDefinitionByName('application').addSetup('info', 'by property');
	          return expect(di.get('application').info).to.be.equal('by property');
	        });
	        it('should throw an error if circular reference was found', function() {
	          di.addService('first', function(second) {});
	          di.addService('second', function(first) {});
	          return expect(function() {
	            return di.get('first');
	          }).to["throw"](Error, 'Circular reference detected for services: first, second.');
	        });
	        it('should throw an error with simple circular reference', function() {
	          di.addService('first', function(first) {});
	          return expect(function() {
	            return di.get('first');
	          }).to["throw"](Error, 'Circular reference detected for service: first.');
	        });
	        return it('should throw an error with advanced circular reference', function() {
	          di.addService('first', function(second) {});
	          di.addService('second', function(third) {});
	          di.addService('third', function(fourth) {});
	          di.addService('fourth', function(first) {});
	          return expect(function() {
	            return di.get('first');
	          }).to["throw"](Error, 'Circular reference detected for services: first, second, third, fourth.');
	        });
	      });
	      describe('#getByPath()', function() {
	        it('should return service by require path', function() {
	          di.addService('app', "" + dir + "/Application");
	          return expect(di.getByPath("" + dir + "/Application")).to.be.an["instanceof"](Application);
	        });
	        return it('should return null for not auto required services', function() {
	          di.addService('info', ['hello']).setInstantiate(false);
	          return expect(di.getByPath('info')).to.not.exists;
	        });
	      });
	      describe('#create()', function() {
	        return it('should return always new instance of Application', function() {
	          return expect(di.create('application')).to.not.be.equal(di.create('application'));
	        });
	      });
	      describe('#getFactory()', function() {
	        return it('should return callable factory for Application', function() {
	          var factory;
	          factory = di.getFactory('application');
	          expect(factory).to.be.an["instanceof"](Function);
	          return expect(factory()).to.be.an["instanceof"](Application);
	        });
	      });
	      return describe('#inject()', function() {
	        it('should inject some service into annonymous function', function(done) {
	          di.addService('array', Array);
	          return di.inject(function(array) {
	            expect(array).to.be.eql([]);
	            return done();
	          });
	        });
	        return it('should throw an error if inject method is not called on function', function() {
	          return expect(function() {
	            return di.inject('');
	          }).to["throw"](Error, "DI: Inject method can be called only on functions.");
	        });
	      });
	    });
	  });
	
	}).call(this);
	

}, '/test/browser/tests/DIConfigurator.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/browser/tests/DIConfigurator.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/browser/tests/DIConfigurator.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/browser/tests/DIConfigurator.coffee';
	var __dirname = '/test/browser/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/browser/tests/DIConfigurator.coffee'], env: {}};

	/** code **/
	(function() {
	  var DI, DIConfigurator, configurator, di, dir;
	
	  DI = require('/lib/DI');
	
	  DIConfigurator = require('/lib/DIConfigurator');
	
	  dir = '/test/data';
	
	  di = null;
	
	  configurator = null;
	
	  describe('DIConfiguration', function() {
	    beforeEach(function() {
	      configurator = new DIConfigurator(dir + '/config.json');
	      di = configurator.create();
	      return di.basePath = dir;
	    });
	    describe('#constructor()', function() {
	      return it('should throw an error for relative paths', function() {
	        return expect(function() {
	          return new DIConfigurator('../data/config.json');
	        }).to["throw"](Error, 'Relative paths to config files are not supported in browser.');
	      });
	    });
	    describe('#parameters', function() {
	      return it('should contain all parameters', function() {
	        return expect(di.parameters).to.be.eql({
	          language: 'en',
	          users: {
	            david: '123456',
	            admin: 'nimda'
	          },
	          database: {
	            user: 'admin',
	            password: 'nimda'
	          }
	        });
	      });
	    });
	    return describe('#getParameter()', function() {
	      it('should throw an error if di object was not created from DIConfigurator', function() {
	        di = new DI;
	        return expect(function() {
	          return di.getParameter('buf');
	        }).to["throw"](Error, 'DI container was not created with DIConfigurator.');
	      });
	      return it('should return expanded parameter', function() {
	        return expect(di.getParameter('database.password')).to.be.equal('nimda');
	      });
	    });
	  });
	
	}).call(this);
	

}, '/test/browser/tests/Helpers.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/browser/tests/Helpers.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/browser/tests/Helpers.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/browser/tests/Helpers.coffee';
	var __dirname = '/test/browser/tests';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/browser/tests/Helpers.coffee'], env: {}};

	/** code **/
	(function() {
	  var Application, AutowirePath, DI, Helpers, Http, Service, di, dir;
	
	  DI = require('/lib/DI');
	
	  Service = require('/lib/Service');
	
	  Helpers = require('/lib/Helpers');
	
	  Application = require('/test/data/Application');
	
	  Http = require('/test/data/Http');
	
	  AutowirePath = require('/test/data/AutowirePath');
	
	  di = null;
	
	  dir = '/test/data';
	
	  describe('Helpers', function() {
	    beforeEach(function() {
	      return di = new DI;
	    });
	    describe('#createInstance()', function() {
	      return it('should create new instance of object with given arguments', function() {
	        var app;
	        app = Helpers.createInstance(Application, ['test'], di);
	        expect(app).to.be.an["instanceof"](Application);
	        return expect(app.array).to.be.equal('test');
	      });
	    });
	    describe('#getArguments()', function() {
	      it('should return an empty array', function() {
	        return expect(Helpers.getArguments(function() {})).to.be.eql([]);
	      });
	      return it('should return an array with arguments', function() {
	        return expect(Helpers.getArguments(function(first, second, third) {})).to.be.eql(['first', 'second', 'third']);
	      });
	    });
	    return describe('#autowireArguments()', function() {
	      it('should return array with services for Application', function() {
	        di.addService('array', Array);
	        return expect(Helpers.autowireArguments(Application, [], di)).to.be.eql([[]]);
	      });
	      it('should return array with services for inject method', function() {
	        var args;
	        di.addService('http', Http);
	        args = Helpers.autowireArguments((new Application([])).setHttp, [], di);
	        expect(args).to.have.length(1);
	        return expect(args[0]).to.be.an["instanceof"](Http);
	      });
	      it('should return array with services for Application with custom ones', function() {
	        var app;
	        di.addService('info', ['hello']).setInstantiate(false);
	        app = new Application([]);
	        return expect(Helpers.autowireArguments(app.prepare, ['simq'], di)).to.be.eql(['simq', ['hello']]);
	      });
	      it('should throw an error if service to autowire does not exists', function() {
	        return expect(function() {
	          return Helpers.autowireArguments(Application, [], di);
	        }).to["throw"](Error, "DI: Service 'array' was not found.");
	      });
	      it('should return array with services from params if they are not in definition', function() {
	        var app;
	        app = new Application([]);
	        return expect(Helpers.autowireArguments(app.withoutDefinition, ['hello'], di)).to.be.eql(['hello']);
	      });
	      it('should inject another service by at char', function() {
	        var fn;
	        fn = function(variable) {
	          return variable;
	        };
	        di.addService('array', Array);
	        return expect(Helpers.autowireArguments(fn, ['@array'], di)).to.be.eql([[]]);
	      });
	      it('should inject service by full path', function() {
	        var fn;
	        fn = function(something) {
	          return {
	            '@di:inject': ['$/test/data/AutowirePath']
	          };
	        };
	        di.addService('someRandomName', '/test/data/AutowirePath');
	        return expect(Helpers.autowireArguments(fn, null, di)[0]).to.be.an["instanceof"](AutowirePath);
	      });
	      it('should inject factory to service with hint and full path', function() {
	        var args, fn;
	        fn = function(arg) {
	          return {
	            '@di:inject': ['factory:$/test/data/AutowirePath']
	          };
	        };
	        di.addService('greatService', '/test/data/AutowirePath');
	        args = Helpers.autowireArguments(fn, null, di);
	        expect(args[0]).to.be.a('function');
	        return expect(args[0]()).to.be.an["instanceof"](AutowirePath);
	      });
	      it('should inject factory to service with hint and just name', function() {
	        var args, fn;
	        fn = function(arg) {
	          return {
	            '@di:inject': ['factory:@greatService']
	          };
	        };
	        di.addService('greatService', '/test/data/AutowirePath');
	        args = Helpers.autowireArguments(fn, null, di);
	        expect(args[0]).to.be.a('function');
	        return expect(args[0]()).to.be.an["instanceof"](AutowirePath);
	      });
	      it('should inject services replaced with dots in the end of hints', function() {
	        var fn;
	        fn = function(first, second, third) {
	          ({
	            '@di:inject': ['test', '...']
	          });
	          return arguments;
	        };
	        di.addService('second', ['second item']).instantiate = false;
	        di.addService('third', ['third item']).instantiate = false;
	        return expect(Helpers.autowireArguments(fn, [], di)).to.be.eql(['test', ['second item'], ['third item']]);
	      });
	      it('should inject services replaced with dots in the beginning of hints', function() {
	        var fn;
	        fn = function(first, second, third) {
	          ({
	            '@di:inject': ['...', 'test']
	          });
	          return arguments;
	        };
	        di.addService('first', ['first item']).instantiate = false;
	        di.addService('second', ['second item']).instantiate = false;
	        return expect(Helpers.autowireArguments(fn, [], di)).to.be.eql([['first item'], ['second item'], 'test']);
	      });
	      it('should inject services replaced with dots in the end', function() {
	        var fn;
	        fn = function(first, second, third) {
	          return arguments;
	        };
	        di.addService('second', ['second item']).instantiate = false;
	        di.addService('third', ['third item']).instantiate = false;
	        return expect(Helpers.autowireArguments(fn, ['test', '...'], di)).to.be.eql(['test', ['second item'], ['third item']]);
	      });
	      return it('should inject services replaced with dots in the beginning', function() {
	        var fn;
	        fn = function(first, second, third) {
	          return arguments;
	        };
	        di.addService('first', ['first item']).instantiate = false;
	        di.addService('second', ['second item']).instantiate = false;
	        return expect(Helpers.autowireArguments(fn, ['...', 'test'], di)).to.be.eql([['first item'], ['second item'], 'test']);
	      });
	    });
	  });
	
	}).call(this);
	

}, '/lib/DIConfigurator.js': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/lib/DIConfigurator.js');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/lib/DIConfigurator.js';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/lib/DIConfigurator.js';
	var __dirname = '/lib';
	var process = {cwd: function() {return '/';}, argv: ['node', '/lib/DIConfigurator.js'], env: {}};

	/** code **/
	// Generated by CoffeeScript 1.6.3
	(function() {
	  var Configuration, DI, DIConfigurator, callsite, isWindow, path;
	
	  DI = require('./DI');
	
	  Configuration = require('easy-configuration');
	
	  isWindow = typeof window !== 'undefined';
	
	  if (!isWindow) {
	    callsite = require('callsite');
	    path = require('path');
	  }
	
	  DIConfigurator = (function() {
	    DIConfigurator.EXPOSE_NAME = 'di';
	
	    DIConfigurator.prototype.config = null;
	
	    DIConfigurator.prototype.path = null;
	
	    DIConfigurator.prototype.basePath = null;
	
	    DIConfigurator.prototype.defaultSetup = {
	      windowExpose: null,
	      expose: false
	    };
	
	    DIConfigurator.prototype.defaultService = {
	      service: null,
	      "arguments": [],
	      instantiate: true,
	      autowired: true,
	      run: false,
	      setup: {}
	    };
	
	    function DIConfigurator(_path) {
	      var stack;
	      if (_path[0] === '.' && isWindow) {
	        throw new Error('Relative paths to config files are not supported in browser.');
	      }
	      if (_path[0] === '.') {
	        stack = callsite();
	        this.basePath = path.dirname(stack[1].getFileName());
	        _path = path.join(this.basePath, _path);
	      }
	      this.path = _path;
	    }
	
	    DIConfigurator.prototype.create = function() {
	      var configuration, defaultService, defaultSetup, di, expose, method, name, run, s, service, _i, _len, _ref, _ref1;
	      this.config = new Configuration(this.path);
	      defaultService = this.defaultService;
	      this.config.addSection('services').loadConfiguration = function() {
	        var config, name;
	        config = this.getConfig();
	        for (name in config) {
	          if (config.hasOwnProperty(name) && (name !== '__proto__')) {
	            config[name] = this.configurator.merge(config[name], defaultService);
	          }
	        }
	        return config;
	      };
	      defaultSetup = this.defaultSetup;
	      this.config.addSection('setup').loadConfiguration = function() {
	        return this.getConfig(defaultSetup);
	      };
	      configuration = this.config.load();
	      di = new DI;
	      if (this.basePath !== null) {
	        di.basePath = this.basePath;
	      }
	      di.config = this.config;
	      di.parameters = this.config.parameters;
	      if (configuration.setup.windowExpose !== null) {
	        console.log('Option windowExpose is deprecated. Please use expose.');
	        configuration.setup.expose = configuration.setup.windowExpose;
	      }
	      expose = configuration.setup.expose;
	      if (expose !== false) {
	        name = typeof expose === 'string' ? expose : DIConfigurator.EXPOSE_NAME;
	        if (typeof window !== 'undefined') {
	          window[name] = di;
	        } else if (typeof global !== 'undefined') {
	          global[name] = di;
	        }
	      }
	      run = [];
	      _ref = configuration.services;
	      for (name in _ref) {
	        service = _ref[name];
	        if (configuration.services.hasOwnProperty(name) && (name !== '__proto__')) {
	          s = di.addService(name, service.service, service["arguments"]);
	          s.setInstantiate(service.instantiate);
	          s.setAutowired(service.autowired);
	          _ref1 = service.setup;
	          for (method in _ref1) {
	            arguments = _ref1[method];
	            if (service.setup.hasOwnProperty(method)) {
	              s.addSetup(method, arguments);
	            }
	          }
	          if (service.run === true) {
	            run.push(name);
	          }
	        }
	      }
	      for (_i = 0, _len = run.length; _i < _len; _i++) {
	        name = run[_i];
	        di.get(name);
	      }
	      return di;
	    };
	
	    return DIConfigurator;
	
	  })();
	
	  module.exports = DIConfigurator;
	
	}).call(this);
	

}, '/test/data/Application.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/data/Application.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/data/Application.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/data/Application.coffee';
	var __dirname = '/test/data';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/data/Application.coffee'], env: {}};

	/** code **/
	(function() {
	  var Application;
	
	  Application = (function() {
	    Application.prototype.array = null;
	
	    Application.prototype.http = null;
	
	    Application.prototype.namespace = null;
	
	    Application.prototype.info = null;
	
	    Application.prototype.data = null;
	
	    Application.prototype.di = null;
	
	    Application.prototype.diFactory = null;
	
	    Application.prototype.other = null;
	
	    function Application(array) {
	      this.array = array;
	    }
	
	    Application.prototype.setHttp = function(http) {
	      this.http = http;
	    };
	
	    Application.prototype.prepare = function(namespace, info) {
	      this.namespace = namespace;
	      this.info = info;
	      return this.namespace;
	    };
	
	    Application.prototype.setData = function(noArray) {
	      if (noArray == null) {
	        noArray = null;
	      }
	      return this.data = noArray;
	    };
	
	    Application.prototype.setDi = function(di) {
	      this.di = di;
	    };
	
	    Application.prototype.setDiFactory = function(diFactory) {
	      this.diFactory = diFactory;
	    };
	
	    Application.prototype.withoutDefinition = function(param) {
	      return this.other = arguments;
	    };
	
	    return Application;
	
	  })();
	
	  module.exports = Application;
	
	}).call(this);
	

}, '/test/data/AutowirePath.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/data/AutowirePath.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/data/AutowirePath.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/data/AutowirePath.coffee';
	var __dirname = '/test/data';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/data/AutowirePath.coffee'], env: {}};

	/** code **/
	(function() {
	  var AutowirePath;
	
	  AutowirePath = (function() {
	    function AutowirePath() {}
	
	    AutowirePath.prototype.greeting = 'hello';
	
	    return AutowirePath;
	
	  })();
	
	  module.exports = AutowirePath;
	
	}).call(this);
	

}, '/test/data/Http.coffee': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/data/Http.coffee');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/data/Http.coffee';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/data/Http.coffee';
	var __dirname = '/test/data';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/data/Http.coffee'], env: {}};

	/** code **/
	(function() {
	  var Http;
	
	  Http = (function() {
	    function Http() {}
	
	    return Http;
	
	  })();
	
	  module.exports = Http;
	
	}).call(this);
	

}, '/test/data/config.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/test/data/config.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/test/data/config.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/test/data/config.json';
	var __dirname = '/test/data';
	var process = {cwd: function() {return '/';}, argv: ['node', '/test/data/config.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"parameters": {
			"language": "en",
			"users": {
				"david": "123456",
				"admin": "nimda"
			},
			"database": {
				"user": "admin",
				"password": "%users.admin%"
			}
		}
	}
	}).call(this);
	

}, '/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, '/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = '/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = '/package.json';
	var __dirname = '/';
	var process = {cwd: function() {return '/';}, argv: ['node', '/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
		"name": "dependency-injection",
		"description": "Dependency injection with configuration and autowire for node js and browser",
		"version": "2.1.1",
		"author": {
			"name": "David Kudera",
			"email": "sakren@gmail.com"
		},
		"keywords": [
			"di",
			"dependency injection",
			"autowire",
			"configuration"
		],
		"repository": {
			"type": "git",
			"url": "git@github.com:sakren/node-dependency-injection.git"
		},
		"license": "MIT",
		"engines": {
			"node": "*"
		},
		"main": "./lib/DI",
		"dependencies": {
			"easy-configuration": "~2.0.0",
			"callsite": "~1.0.0"
		},
		"devDependencies": {
			"chai": "~1.8.1",
			"mocha": "~1.16.2",
			"mocha-phantomjs": "~3.3.1",
			"phantomjs": "~1.9.2-6"
		},
		"scripts": {
			"test": "npm run test-node && npm run test-browser",
			"build-and-test": "npm run test-build && npm run test",
			"test-build": "cd ./test/browser; simq build;",
			"test-node": "mocha ./test/node/index.js --reporter spec",
			"test-browser": "mocha-phantomjs ./test/browser/index.html"
		}
	}
	}).call(this);
	

}, 'easy-configuration/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'easy-configuration/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'easy-configuration/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'easy-configuration/package.json';
	var __dirname = 'easy-configuration';
	var process = {cwd: function() {return '/';}, argv: ['node', 'easy-configuration/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "easy-configuration",
	  "description": "Simply extensible loader for json config files",
	  "version": "2.0.0",
	  "author": {
	    "name": "David Kudera",
	    "email": "sakren@gmail.com"
	  },
	  "keywords": [
	    "config",
	    "configurator",
	    "configuration",
	    "setup",
	    "settings",
	    "json"
	  ],
	  "repository": {
	    "type": "git",
	    "url": "git@github.com:sakren/node-easy-configuration.git"
	  },
	  "license": "MIT",
	  "engines": {
	    "node": "*"
	  },
	  "main": "./lib/EasyConfiguration.js",
	  "dependencies": {
	    "recursive-merge": "~1.2.0",
	    "callsite": "~1.0.0"
	  },
	  "devDependencies": {
	    "chai": "~1.8.0",
	    "mocha": "~1.16.2",
	    "mocha-phantomjs": "~3.3.1",
	    "phantomjs": "~1.9.2-6"
	  },
	  "scripts": {
	    "test": "npm run test-node && npm run test-browser",
	    "build-and-test": "npm run test-build && npm run test",
	    "test-build": "cd ./test/browser; simq build;",
	    "test-node": "mocha ./test/node/index.js --reporter spec",
	    "test-browser": "mocha-phantomjs ./test/browser/index.html"
	  },
	  "readme": "[![NPM version](https://badge.fury.io/js/easy-configuration.png)](http://badge.fury.io/js/easy-configuration)\n[![Dependency Status](https://gemnasium.com/sakren/node-easy-configuration.png)](https://gemnasium.com/sakren/node-easy-configuration)\n[![Build Status](https://travis-ci.org/sakren/node-easy-configuration.png?branch=master)](https://travis-ci.org/sakren/node-easy-configuration)\n\n# Easy Configuration\n\nSimply extensible loader for json config files. This package is inspired by configuration in PHP framework [Nette](http://nette.org/en/).\n\n## Installing\n\n```\n$ npm install easy-configuration\n```\n\n## Loading config\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./my/config.json');\n\nvar data = config.load();\n```\n\n**Relative paths to config files are supported only on node (not in browser)!!!**\n\n## Parameters\n\nIn default, this configurator contains two basic sections: parameters and includes.\nParameters section can holds all your variables which you will need in other sections\n\n```\n{\n\t\"parameters\": {\n\t\t\"basePath\": \"./www\",\n\t\t\"shared\": {\n\t\t\t\"styles\": \"%basePath%/css\",\n\t\t\t\"scripts\": \"%basePath%/js\",\n\t\t\t\"translations\": \"%basePath%/lang\"\n\t\t}\n\t}\n}\n```\n\n## Including other config files\n\nIf you will add section includes, you can set list of files, which you want to merge with main config file.\nPaths to these config files must be relative to main config file.\n\n```\n{\n\t\"includes\": [\n\t\t\"./packages.json\"\n\t]\n}\n```\n\n## Different environments\n\nYou may need different configuration for different environments (like production or development). First thing you need to\ndo, is put your whole current configuration (also with all other sections - see below) into `common` section.\n\n**This feature is applied only to main config files, not to files included from `includes` section.**\n**It will be automatically turned on when there will be `common` section or section with name of current environment.**\n\n```\n{\n\t\"common\": {\n\t\t\"parameters\": {\n\t\t\t\"database\": {}\n\t\t}\n\t}\n}\n```\n\nCommon section is base section for all environments. But other environments can rewrite everything in `common` section.\n\n```\n{\n\t\"common\": {\n\t\t\"parameters\": {\n\t\t\t\"database\": {\n\t\t\t\t\"host\": \"127.0.0.1\",\n\t\t\t\t\"user\": \"root\",\n\t\t\t\t\"database\": \"my-db\"\n\t\t\t}\n\t\t}\n\t},\n\t\"production\": {\n\t\t\"parameters\": {\n\t\t\t\"database\": {\n\t\t\t\t\"password\": \"qwerty12345\"\n\t\t\t}\n\t\t}\n\t},\n\t\"development\": {\n\t\t\"parameters\": {\n\t\t\t\"database\": {\n\t\t\t\t\"password\": \"root\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nNow we have got configuration with two different setups for database.\n\n```\nprocess.env.NODE_ENV = 'production';\n\nvar config = new Configuration;\nconfig.addConfig('./some-config.json', process.env.NODE_ENV);\t\t// or new Configuration('./some-config.json', process.env.NODE_ENV);\n\nvar data = config.load()\n\nconsole.log(config.parameters.database.password);\t\t// output: qwerty12345\n```\n\nWith this setup, configurator will load data from `production` section merged with `common` section.\n\n## Own sections\n\nAs you could see, there are prepared two base sections (`parameters` and `includes`).\n\nBut you can create your own special sections. You just need to register them.\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./config.json');\n\nconfig.addSection('packages');\t\t\t\t// register new section\n\nvar packages = config.load().packages;\t\t// data from packages section in config.json file\n```\n\n## Parameters in own sections\n\nIn your sections, you can use parameters from section \"parameters\".\n\n```\n{\n\t\"parameters\": { ... },\n\t\"packages\": {\n\t\t\"application\": \"%basePath%/application.js\",\n\t\t\"translator\": {\n\t\t\t\"translations\": \"%shared.translations%\",\n\t\t\t\"script\": \"%basePath%/translator.js\"\n\t\t},\n\t\t\"items\": [\n\t\t\t{\n\t\t\t\t\"name\": \"one\",\n\t\t\t\t\"title\": \"First\"\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"two\",\n\t\t\t\t\"allowed\": false\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"three\"\n\t\t\t}\n\t\t]\n\t}\n}\n```\n\n## Customize sections\n\nSometimes you may want to customize output of your section. Most simple way is to rewrite method loadConfiguration\nof default Extension class.\nFor example we always want some other data in our section, even if they are not in config file - let's say \"defaults\".\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./config.json');\n\nvar section = config.addSection('packages');\n\nvar defaults = {\n\tapplications: \"\",\n\tstyles: \"\",\n\ttranslator: {\n\t\ttranslations: \"\",\n\t\tscript: \"\"\n\t}\n};\n\nsection.loadConfiguration = function() {\n\treturn this.getConfig(defaults);\t\t// data from your section will be merged with defaults variable\n};\n\nvar packages = config.load().packages;\t\t// updated data with defaults\n```\n\nEasyConfiguration class has got one other useful method and it is merge (using [recursive-merge](https://npmjs.org/package/recursive-merge) package).\nWith this you can create more complex sections.\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./config.json');\n\nvar section = config.addSection('packages');\n\nvar defaults = {\n\tapplications: \"\",\n\tstyles: \"\",\n\ttranslator: {\n\t\ttranslations: \"\",\n\t\tscript: \"\"\n\t},\n\titems: []\n};\n\nvar defaultsItems = {\n\tname: \"\",\n\ttitle: \"\",\n\tallowed: true\n};\n\nsection.loadConfiguration = function() {\n\tvar config = this.getConfig(defaults);\n\n\tfor (var i = 0; i < config.items.length; i++) {\n\t\tconfig.items[i] = this.configurator.merge(config.items[i], defaultsItems);\n\t}\n\n\treturn config;\n};\n\nvar packages = config.load().packages;\n```\n\n### After compile\n\nAll data in loadConfiguration are the same like in your json files - parameters are not yet expanded. If you want to work\nsomehow with expanded data, you will need to rewrite afterCompile method.\n\nBut even if you use this method, setup styles for your configuration should be set in loadConfiguration method, not in afterCompile.\n\nThis method accept one parameter - data which you returned in loadConfiguration method. You also need to return your updated\ndata.\n\n```\nsection.afterCompile = function(config) {\n\treturn doSomeMagic(config);\n};\n```\n\n## Accessing parameters from outside\n\n```\nvar Configuration = require('easy-configuration');\nvar config = new Configuration('./config.json');\n\nvar data = config.load();\nvar parameters = config.parameters;\n\n// or\n\nvar parameter = config.getParameter('path.to.some.variable');\n```\n\n## Tests\n\n```\n$ npm test\n```\n\n## Changelog\n\n* 2.0.0\n\t+ Optimized tests\n\t+ Tests frameworks does not need to be installed globally (are in devDependencies)\n\t+ Added badges\n\t+ Added support for different environments\n\t+ Loading config files with relative paths in node.js\n\t+ Better documentation\n\n* 1.6.3 - 1.6.6\n\t+ Bugs in IE8\n\n* 1.6.2\n\t+ Throwing error if there is some circular reference\n\n* 1.6.1\n\t+ Removed dependency on clone module\n\n* 1.6.0\n\t+ Added many tests + tests for browser\n\t+ Updated docs\n\t+ Rewritten parameters parsing (now much better)\n\n* 1.5.7\n\t+ Support for Internet Explorer 8\n\n* 1.5.4 - 1.5.6\n\t+ Some optimizations\n\t+ Optimized tests\n\n* 1.5.3\n\t+ Preparations for new version\n\t+ Loaded data are cloned (from require method)\n\n* 1.5.2\n\t+ Previous version broke support for browser\n\n* 1.5.0\n\t+ Optimized dependencies\n\t+ Refactoring tests\n\t+ Removed some useless methods\n\n* 1.4.3\n\t+ Extension: added afterCompile method\n\t+ Some typos in readme\n\n* 1.4.2\n\t+ Merging uses [recursive-merge](https://npmjs.org/package/recursive-merge) package\n\n* 1.4.1\n\t+ Written rest of this changelog\n\n* 1.4.0\n\t+ Added changelog to readme\n\t+ Created tests\n\t+ Tests can be run with `npm test` command\n\t+ Added removeExtension method\n\n* 1.3.3\n\t+ Removed forgotten dependency on merging module\n\n* 1.3.2\n\t+ External merging module removed\n\t+ Own old merging function added back\n\n* 1.3.1\n\t+ Repaired some bugs with merging\n\n* 1.3.0\n\t+ Whole module is rewritten\n\n* 1.2.0\n\t+ Trying other external modules for merging\n\t+ Removed dependencies on fs and path\n\t+ Module can be run also in browser\n\n* 1.1.3\n\t+ Added MIT license\n\n* 1.1.2\n\t+ GIT repository renamed from Easy-Configuration to node-easy-configuration\n\n* 1.1.1\n\t+ Added function for remove loaded data from memory\n\n* 1.1.0\n\t+ Storing loaded data in memory\n\t+ Empty sections returns empty object and not undefined\n\n* 1.0.4\n\t+ Renaming from EasyConfiguration to easy-configuration\n\n* 1.0.3\n\t+ Corrected mistakes in readme\n\t+ Added link to Nette framework\n\n* 1.0.2\n\t+ Corrected mistakes in readme\n\n* 1.0.1\n\t+ Corrected mistakes in readme\n\n* 1.0.0\n\t+ Initial commit",
	  "readmeFilename": "README.md",
	  "bugs": {
	    "url": "https://github.com/sakren/node-easy-configuration/issues"
	  },
	  "homepage": "https://github.com/sakren/node-easy-configuration",
	  "_id": "easy-configuration@2.0.0",
	  "_from": "easy-configuration@~2.0.0"
	}
	
	}).call(this);
	

}, 'callsite/package.json': function(exports, module) {

	/** node globals **/
	var require = function(name) {return window.require(name, 'callsite/package.json');};
	require.resolve = function(name, parent) {if (parent === null) {parent = 'callsite/package.json';} return window.require.resolve(name, parent);};
	require.define = function(bundle) {window.require.define(bundle);};
	require.cache = window.require.cache;
	var __filename = 'callsite/package.json';
	var __dirname = 'callsite';
	var process = {cwd: function() {return '/';}, argv: ['node', 'callsite/package.json'], env: {}};

	/** code **/
	module.exports = (function() {
	return {
	  "name": "callsite",
	  "version": "1.0.0",
	  "description": "access to v8's CallSites",
	  "keywords": [
	    "stack",
	    "trace",
	    "line"
	  ],
	  "author": {
	    "name": "TJ Holowaychuk",
	    "email": "tj@vision-media.ca"
	  },
	  "dependencies": {},
	  "devDependencies": {
	    "mocha": "*",
	    "should": "*"
	  },
	  "main": "index",
	  "engines": {
	    "node": "*"
	  },
	  "readme": "# callstack\n\n  Access to v8's \"raw\" `CallSite`s.\n\n## Installation\n\n    $ npm install callsite\n\n## Example\n\n```js\nvar stack = require('callsite');\n\nfoo();\n\nfunction foo() {\n  bar();\n}\n\nfunction bar() {\n  baz();\n}\n\nfunction baz() {\n  console.log();\n  stack().forEach(function(site){\n    console.log('  \\033[36m%s\\033[90m in %s:%d\\033[0m'\n      , site.getFunctionName() || 'anonymous'\n      , site.getFileName()\n      , site.getLineNumber());\n  });\n  console.log();\n}\n```\n\n## Why?\n\n  Because you can do weird, stupid, clever, wacky things such as:\n\n  - [better-assert](https://github.com/visionmedia/better-assert)\n\n## License\n\n  MIT\n",
	  "readmeFilename": "Readme.md",
	  "_id": "callsite@1.0.0",
	  "dist": {
	    "shasum": "5bd0a21871110cc4720abf4d8498bab17a74c902"
	  },
	  "_from": "callsite@1.0.0",
	  "_resolved": "https://registry.npmjs.org/callsite/-/callsite-1.0.0.tgz"
	}
	
	}).call(this);
	

}, 'easy-configuration': function(exports, module) { module.exports = window.require('easy-configuration/lib/EasyConfiguration.js'); }
, 'recursive-merge': function(exports, module) { module.exports = window.require('recursive-merge/lib/Merge.js'); }
, 'callsite': function(exports, module) { module.exports = window.require('callsite/index.js'); }

});
require.__setStats({"/lib/Service.js":{"atime":1389081257000,"mtime":1389081238000,"ctime":1389081238000},"/lib/Helpers.js":{"atime":1389083391000,"mtime":1389083372000,"ctime":1389083372000},"/lib/Defaults.js":{"atime":1389090301000,"mtime":1389090229000,"ctime":1389090229000},"/lib/DI.js":{"atime":1389088852000,"mtime":1389088849000,"ctime":1389088849000},"easy-configuration/lib/EasyConfiguration.js":{"atime":1389108603000,"mtime":1389106575000,"ctime":1389108599000},"recursive-merge/lib/Merge.js":{"atime":1389108685000,"mtime":1385409966000,"ctime":1389108599000},"easy-configuration/lib/Extension.js":{"atime":1389108603000,"mtime":1389093412000,"ctime":1389108599000},"easy-configuration/lib/Helpers.js":{"atime":1389108603000,"mtime":1389093412000,"ctime":1389108599000},"callsite/index.js":{"atime":1389081083000,"mtime":1359062982000,"ctime":1389081065000},"/test/browser/tests/DI.coffee":{"atime":1389090301000,"mtime":1389090257000,"ctime":1389090257000},"/test/browser/tests/DIConfigurator.coffee":{"atime":1389082345000,"mtime":1389082317000,"ctime":1389082317000},"/test/browser/tests/Helpers.coffee":{"atime":1389081274000,"mtime":1388655455000,"ctime":1388655455000},"/lib/DIConfigurator.js":{"atime":1389083042000,"mtime":1389083040000,"ctime":1389083040000},"/test/data/Application.coffee":{"atime":1389081274000,"mtime":1386925844000,"ctime":1386925844000},"/test/data/AutowirePath.coffee":{"atime":1389081274000,"mtime":1386934815000,"ctime":1386934815000},"/test/data/Http.coffee":{"atime":1389081274000,"mtime":1384940373000,"ctime":1384940373000},"/test/data/config.json":{"atime":1389081274000,"mtime":1388653053000,"ctime":1388653053000},"/package.json":{"atime":1389108675000,"mtime":1389108671000,"ctime":1389108671000},"easy-configuration/package.json":{"atime":1389108603000,"mtime":1389108599000,"ctime":1389108599000},"callsite/package.json":{"atime":1389081083000,"mtime":1389081065000,"ctime":1389081065000}});
require.version = '5.5.1';

/** run section **/

/** /test/browser/tests/Helpers **/
require('/test/browser/tests/Helpers');

/** /test/browser/tests/DI **/
require('/test/browser/tests/DI');

/** /test/browser/tests/DIConfigurator **/
require('/test/browser/tests/DIConfigurator');